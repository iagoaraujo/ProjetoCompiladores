/*
 * generated by Xtext
 */
grammar InternalJava;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.java.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.java.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.java.services.JavaGrammarAccess;

}

@parser::members {
 
 	private JavaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JavaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleHead
entryRuleHead 
:
{ before(grammarAccess.getHeadRule()); }
	 ruleHead
{ after(grammarAccess.getHeadRule()); } 
	 EOF 
;

// Rule Head
ruleHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHeadAccess().getElementsAssignment()); }
(rule__Head__ElementsAssignment)
{ after(grammarAccess.getHeadAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompilation_unit
entryRuleCompilation_unit 
:
{ before(grammarAccess.getCompilation_unitRule()); }
	 ruleCompilation_unit
{ after(grammarAccess.getCompilation_unitRule()); } 
	 EOF 
;

// Rule Compilation_unit
ruleCompilation_unit
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompilation_unitAccess().getGroup()); }
(rule__Compilation_unit__Group__0)
{ after(grammarAccess.getCompilation_unitAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage_statement
entryRulePackage_statement 
:
{ before(grammarAccess.getPackage_statementRule()); }
	 rulePackage_statement
{ after(grammarAccess.getPackage_statementRule()); } 
	 EOF 
;

// Rule Package_statement
rulePackage_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackage_statementAccess().getGroup()); }
(rule__Package_statement__Group__0)
{ after(grammarAccess.getPackage_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage_name
entryRulePackage_name 
:
{ before(grammarAccess.getPackage_nameRule()); }
	 rulePackage_name
{ after(grammarAccess.getPackage_nameRule()); } 
	 EOF 
;

// Rule Package_name
rulePackage_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackage_nameAccess().getGroup()); }
(rule__Package_name__Group__0)
{ after(grammarAccess.getPackage_nameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePackage_name_aux
entryRulePackage_name_aux 
:
{ before(grammarAccess.getPackage_name_auxRule()); }
	 rulePackage_name_aux
{ after(grammarAccess.getPackage_name_auxRule()); } 
	 EOF 
;

// Rule Package_name_aux
rulePackage_name_aux
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPackage_name_auxAccess().getGroup()); }
(rule__Package_name_aux__Group__0)*
{ after(grammarAccess.getPackage_name_auxAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport_statement
entryRuleImport_statement 
:
{ before(grammarAccess.getImport_statementRule()); }
	 ruleImport_statement
{ after(grammarAccess.getImport_statementRule()); } 
	 EOF 
;

// Rule Import_statement
ruleImport_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImport_statementAccess().getGroup()); }
(rule__Import_statement__Group__0)
{ after(grammarAccess.getImport_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass_name
entryRuleClass_name 
:
{ before(grammarAccess.getClass_nameRule()); }
	 ruleClass_name
{ after(grammarAccess.getClass_nameRule()); } 
	 EOF 
;

// Rule Class_name
ruleClass_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClass_nameAccess().getPackage_nameParserRuleCall()); }
	rulePackage_name
{ after(grammarAccess.getClass_nameAccess().getPackage_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import_statement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getGroup_1_0()); }
(rule__Import_statement__Group_1_0__0)
{ after(grammarAccess.getImport_statementAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getImport_statementAccess().getGroup_1_1()); }
(rule__Import_statement__Group_1_1__0)
{ after(grammarAccess.getImport_statementAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Compilation_unit__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compilation_unit__Group__0__Impl
	rule__Compilation_unit__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compilation_unit__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompilation_unitAccess().getPackageAssignment_0()); }
(rule__Compilation_unit__PackageAssignment_0)?
{ after(grammarAccess.getCompilation_unitAccess().getPackageAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compilation_unit__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compilation_unit__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compilation_unit__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompilation_unitAccess().getImportsAssignment_1()); }
(rule__Compilation_unit__ImportsAssignment_1)*
{ after(grammarAccess.getCompilation_unitAccess().getImportsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Package_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package_statement__Group__0__Impl
	rule__Package_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_statementAccess().getPackageKeyword_0()); }

	'package' 

{ after(grammarAccess.getPackage_statementAccess().getPackageKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package_statement__Group__1__Impl
	rule__Package_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Package_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_statementAccess().getNameAssignment_1()); }
(rule__Package_statement__NameAssignment_1)
{ after(grammarAccess.getPackage_statementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package_statement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_statementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getPackage_statementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Package_name__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package_name__Group__0__Impl
	rule__Package_name__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package_name__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_nameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getPackage_nameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package_name__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package_name__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package_name__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_nameAccess().getPackage_name_auxParserRuleCall_1()); }
	rulePackage_name_aux
{ after(grammarAccess.getPackage_nameAccess().getPackage_name_auxParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Package_name_aux__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package_name_aux__Group__0__Impl
	rule__Package_name_aux__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package_name_aux__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_name_auxAccess().getFullStopKeyword_0()); }

	'.' 

{ after(grammarAccess.getPackage_name_auxAccess().getFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Package_name_aux__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Package_name_aux__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package_name_aux__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_name_auxAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getPackage_name_auxAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import_statement__Group__0__Impl
	rule__Import_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImport_statementAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getAlternatives_1()); }
(rule__Import_statement__Alternatives_1)
{ after(grammarAccess.getImport_statementAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import_statement__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import_statement__Group_1_0__0__Impl
	rule__Import_statement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getClassnameAssignment_1_0_0()); }
(rule__Import_statement__ClassnameAssignment_1_0_0)
{ after(grammarAccess.getImport_statementAccess().getClassnameAssignment_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import_statement__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import_statement__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getSemicolonKeyword_1_0_1()); }

	';' 

{ after(grammarAccess.getImport_statementAccess().getSemicolonKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Import_statement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import_statement__Group_1_1__0__Impl
	rule__Import_statement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getPackagenameAssignment_1_1_0()); }
(rule__Import_statement__PackagenameAssignment_1_1_0)
{ after(grammarAccess.getImport_statementAccess().getPackagenameAssignment_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import_statement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import_statement__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getFullStopAsteriskSemicolonKeyword_1_1_1()); }

	'.*;' 

{ after(grammarAccess.getImport_statementAccess().getFullStopAsteriskSemicolonKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Head__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHeadAccess().getElementsCompilation_unitParserRuleCall_0()); }
	ruleCompilation_unit{ after(grammarAccess.getHeadAccess().getElementsCompilation_unitParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compilation_unit__PackageAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompilation_unitAccess().getPackagePackage_statementParserRuleCall_0_0()); }
	rulePackage_statement{ after(grammarAccess.getCompilation_unitAccess().getPackagePackage_statementParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Compilation_unit__ImportsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompilation_unitAccess().getImportsImport_statementParserRuleCall_1_0()); }
	ruleImport_statement{ after(grammarAccess.getCompilation_unitAccess().getImportsImport_statementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Package_statement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPackage_statementAccess().getNamePackage_nameParserRuleCall_1_0()); }
	rulePackage_name{ after(grammarAccess.getPackage_statementAccess().getNamePackage_nameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__ClassnameAssignment_1_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getClassnameClass_nameParserRuleCall_1_0_0_0()); }
	ruleClass_name{ after(grammarAccess.getImport_statementAccess().getClassnameClass_nameParserRuleCall_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import_statement__PackagenameAssignment_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImport_statementAccess().getPackagenamePackage_nameParserRuleCall_1_1_0_0()); }
	rulePackage_name{ after(grammarAccess.getImport_statementAccess().getPackagenamePackage_nameParserRuleCall_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$'|'\u00C0'..'\uFFFF')*;

RULE_DOC_COMMENT : '/**' ( options {greedy=false;} : . )*'*/';

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


