/*
 * generated by Xtext
 */
package org.xtext.java.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class JavaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Head");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsCompilation_unitParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Head:
		//	elements+=Compilation_unit;
		@Override public ParserRule getRule() { return rule; }

		//elements+=Compilation_unit
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Compilation_unit
		public RuleCall getElementsCompilation_unitParserRuleCall_0() { return cElementsCompilation_unitParserRuleCall_0; }
	}

	public class Compilation_unitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Compilation_unit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompilation_unitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagePackage_statementParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImport_statementParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cType_declarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cType_declarationsType_declarationParserRuleCall_3_0 = (RuleCall)cType_declarationsAssignment_3.eContents().get(0);
		
		//Compilation_unit:
		//	{Compilation_unit} package=Package_statement? imports+=Import_statement* type_declarations+=Type_declaration*;
		@Override public ParserRule getRule() { return rule; }

		//{Compilation_unit} package=Package_statement? imports+=Import_statement* type_declarations+=Type_declaration*
		public Group getGroup() { return cGroup; }

		//{Compilation_unit}
		public Action getCompilation_unitAction_0() { return cCompilation_unitAction_0; }

		//package=Package_statement?
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//Package_statement
		public RuleCall getPackagePackage_statementParserRuleCall_1_0() { return cPackagePackage_statementParserRuleCall_1_0; }

		//imports+=Import_statement*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import_statement
		public RuleCall getImportsImport_statementParserRuleCall_2_0() { return cImportsImport_statementParserRuleCall_2_0; }

		//type_declarations+=Type_declaration*
		public Assignment getType_declarationsAssignment_3() { return cType_declarationsAssignment_3; }

		//Type_declaration
		public RuleCall getType_declarationsType_declarationParserRuleCall_3_0() { return cType_declarationsType_declarationParserRuleCall_3_0; }
	}

	public class Type_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDocAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDocDOC_COMMENTTerminalRuleCall_0_0 = (RuleCall)cDocAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNameClass_declarationParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cNameInterface_declarationParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Type_declaration:
		//	doc=DOC_COMMENT? (name=Class_declaration | name=Interface_declaration) ";";
		@Override public ParserRule getRule() { return rule; }

		//doc=DOC_COMMENT? (name=Class_declaration | name=Interface_declaration) ";"
		public Group getGroup() { return cGroup; }

		//doc=DOC_COMMENT?
		public Assignment getDocAssignment_0() { return cDocAssignment_0; }

		//DOC_COMMENT
		public RuleCall getDocDOC_COMMENTTerminalRuleCall_0_0() { return cDocDOC_COMMENTTerminalRuleCall_0_0; }

		//name=Class_declaration | name=Interface_declaration
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//name=Class_declaration
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Class_declaration
		public RuleCall getNameClass_declarationParserRuleCall_1_0_0() { return cNameClass_declarationParserRuleCall_1_0_0; }

		//name=Interface_declaration
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Interface_declaration
		public RuleCall getNameInterface_declarationParserRuleCall_1_1_0() { return cNameInterface_declarationParserRuleCall_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Interface_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInterfaceNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInterfaceNameIDTerminalRuleCall_2_0 = (RuleCall)cInterfaceNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendInterface_nameParserRuleCall_3_1_0 = (RuleCall)cExtendAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cExtendsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cExtendsInterface_nameParserRuleCall_3_2_1_0 = (RuleCall)cExtendsAssignment_3_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Interface_declaration:
		//	modifiers+=Modifier* "interface" interfaceName=ID ("extends" extend=Interface_name ("," extends+=Interface_name)*)?
		//	"{" "}";
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "interface" interfaceName=ID ("extends" extend=Interface_name ("," extends+=Interface_name)*)? "{"
		//"}"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//"interface"
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }

		//interfaceName=ID
		public Assignment getInterfaceNameAssignment_2() { return cInterfaceNameAssignment_2; }

		//ID
		public RuleCall getInterfaceNameIDTerminalRuleCall_2_0() { return cInterfaceNameIDTerminalRuleCall_2_0; }

		//("extends" extend=Interface_name ("," extends+=Interface_name)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extend=Interface_name
		public Assignment getExtendAssignment_3_1() { return cExtendAssignment_3_1; }

		//Interface_name
		public RuleCall getExtendInterface_nameParserRuleCall_3_1_0() { return cExtendInterface_nameParserRuleCall_3_1_0; }

		//("," extends+=Interface_name)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//extends+=Interface_name
		public Assignment getExtendsAssignment_3_2_1() { return cExtendsAssignment_3_2_1; }

		//Interface_name
		public RuleCall getExtendsInterface_nameParserRuleCall_3_2_1_0() { return cExtendsInterface_nameParserRuleCall_3_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class Class_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExtendAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExtendClass_nameParserRuleCall_3_1_0 = (RuleCall)cExtendAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cImplementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cImplementAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cImplementInterface_nameParserRuleCall_4_1_0 = (RuleCall)cImplementAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cImplementsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cImplementsInterface_nameParserRuleCall_4_2_1_0 = (RuleCall)cImplementsAssignment_4_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFieldsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFieldsField_declarationParserRuleCall_6_0 = (RuleCall)cFieldsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class_declaration:
		//	modifiers+=Modifier* "class" className=ID ("extends" extend=Class_name)? ("implements" implement=Interface_name (","
		//	implements+=Interface_name)*)? "{" fields+=Field_declaration* "}";
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* "class" className=ID ("extends" extend=Class_name)? ("implements" implement=Interface_name (","
		//implements+=Interface_name)*)? "{" fields+=Field_declaration* "}"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }

		//("extends" extend=Class_name)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//extend=Class_name
		public Assignment getExtendAssignment_3_1() { return cExtendAssignment_3_1; }

		//Class_name
		public RuleCall getExtendClass_nameParserRuleCall_3_1_0() { return cExtendClass_nameParserRuleCall_3_1_0; }

		//("implements" implement=Interface_name ("," implements+=Interface_name)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"implements"
		public Keyword getImplementsKeyword_4_0() { return cImplementsKeyword_4_0; }

		//implement=Interface_name
		public Assignment getImplementAssignment_4_1() { return cImplementAssignment_4_1; }

		//Interface_name
		public RuleCall getImplementInterface_nameParserRuleCall_4_1_0() { return cImplementInterface_nameParserRuleCall_4_1_0; }

		//("," implements+=Interface_name)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//implements+=Interface_name
		public Assignment getImplementsAssignment_4_2_1() { return cImplementsAssignment_4_2_1; }

		//Interface_name
		public RuleCall getImplementsInterface_nameParserRuleCall_4_2_1_0() { return cImplementsInterface_nameParserRuleCall_4_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//fields+=Field_declaration*
		public Assignment getFieldsAssignment_6() { return cFieldsAssignment_6; }

		//Field_declaration
		public RuleCall getFieldsField_declarationParserRuleCall_6_0() { return cFieldsField_declarationParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class Field_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field_declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDocAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cDocDOC_COMMENTTerminalRuleCall_0_0_0 = (RuleCall)cDocAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cNameVariable_declarationParserRuleCall_0_1_0_0 = (RuleCall)cNameAssignment_0_1_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cNameConstructor_declarationParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cAlternatives_0_1.eContents().get(2);
		private final RuleCall cNameMethod_declarationParserRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameStatic_initializerParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDebugAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cDebugSemicolonKeyword_2_0 = (Keyword)cDebugAssignment_2.eContents().get(0);
		
		//Field_declaration:
		//	doc=DOC_COMMENT? (name=Variable_declaration | name=Constructor_declaration | name=Method_declaration) |
		//	name=Static_initializer | debug=";";
		@Override public ParserRule getRule() { return rule; }

		//doc=DOC_COMMENT? (name=Variable_declaration | name=Constructor_declaration | name=Method_declaration) |
		//name=Static_initializer | debug=";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//doc=DOC_COMMENT? (name=Variable_declaration | name=Constructor_declaration | name=Method_declaration)
		public Group getGroup_0() { return cGroup_0; }

		//doc=DOC_COMMENT?
		public Assignment getDocAssignment_0_0() { return cDocAssignment_0_0; }

		//DOC_COMMENT
		public RuleCall getDocDOC_COMMENTTerminalRuleCall_0_0_0() { return cDocDOC_COMMENTTerminalRuleCall_0_0_0; }

		//name=Variable_declaration | name=Constructor_declaration | name=Method_declaration
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//name=Variable_declaration
		public Assignment getNameAssignment_0_1_0() { return cNameAssignment_0_1_0; }

		//Variable_declaration
		public RuleCall getNameVariable_declarationParserRuleCall_0_1_0_0() { return cNameVariable_declarationParserRuleCall_0_1_0_0; }

		//name=Constructor_declaration
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Constructor_declaration
		public RuleCall getNameConstructor_declarationParserRuleCall_0_1_1_0() { return cNameConstructor_declarationParserRuleCall_0_1_1_0; }

		//name=Method_declaration
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }

		//Method_declaration
		public RuleCall getNameMethod_declarationParserRuleCall_0_1_2_0() { return cNameMethod_declarationParserRuleCall_0_1_2_0; }

		//name=Static_initializer
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Static_initializer
		public RuleCall getNameStatic_initializerParserRuleCall_1_0() { return cNameStatic_initializerParserRuleCall_1_0; }

		//debug=";"
		public Assignment getDebugAssignment_2() { return cDebugAssignment_2; }

		//";"
		public Keyword getDebugSemicolonKeyword_2_0() { return cDebugSemicolonKeyword_2_0; }
	}

	public class Method_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParameterParameter_listParserRuleCall_4_0 = (RuleCall)cParameterAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cStatementStatement_blockParserRuleCall_7_0_0 = (RuleCall)cStatementAssignment_7_0.eContents().get(0);
		private final Assignment cDebugAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final Keyword cDebugSemicolonKeyword_7_1_0 = (Keyword)cDebugAssignment_7_1.eContents().get(0);
		
		//Method_declaration:
		//	modifiers+=Modifier* type=Type name=ID "(" parameter=Parameter_list? ")" ("[" "]" | "[]")* (statement=Statement_block
		//	| debug=";");
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* type=Type name=ID "(" parameter=Parameter_list? ")" ("[" "]" | "[]")* (statement=Statement_block |
		//debug=";")
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//parameter=Parameter_list?
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }

		//Parameter_list
		public RuleCall getParameterParameter_listParserRuleCall_4_0() { return cParameterParameter_listParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("[" "]" | "[]")*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"[" "]"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0_0() { return cLeftSquareBracketKeyword_6_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_0_1() { return cRightSquareBracketKeyword_6_0_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_6_1() { return cLeftSquareBracketRightSquareBracketKeyword_6_1; }

		//statement=Statement_block | debug=";"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//statement=Statement_block
		public Assignment getStatementAssignment_7_0() { return cStatementAssignment_7_0; }

		//Statement_block
		public RuleCall getStatementStatement_blockParserRuleCall_7_0_0() { return cStatementStatement_blockParserRuleCall_7_0_0; }

		//debug=";"
		public Assignment getDebugAssignment_7_1() { return cDebugAssignment_7_1; }

		//";"
		public Keyword getDebugSemicolonKeyword_7_1_0() { return cDebugSemicolonKeyword_7_1_0; }
	}

	public class Constructor_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constructor_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameter_listParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatement_blockParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		
		//Constructor_declaration:
		//	modifiers+=Modifier* name=ID "(" parameters=Parameter_list? ")" statement=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* name=ID "(" parameters=Parameter_list? ")" statement=Statement_block
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters=Parameter_list?
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//Parameter_list
		public RuleCall getParametersParameter_listParserRuleCall_3_0() { return cParametersParameter_listParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//statement=Statement_block
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }

		//Statement_block
		public RuleCall getStatementStatement_blockParserRuleCall_5_0() { return cStatementStatement_blockParserRuleCall_5_0; }
	}

	public class Parameter_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//Parameter_list:
		//	parameter=Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//parameter=Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//parameter=Parameter
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_0_0() { return cParameterParameterParserRuleCall_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//Parameter:
		//	type=Type name=ID ("[" "]" | "[]")*;
		@Override public ParserRule getRule() { return rule; }

		//type=Type name=ID ("[" "]" | "[]")*
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" "]" | "[]")*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"[" "]"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0_0() { return cLeftSquareBracketKeyword_2_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_0_1() { return cRightSquareBracketKeyword_2_0_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2_1() { return cLeftSquareBracketRightSquareBracketKeyword_2_1; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifiersModifierParserRuleCall_0_0 = (RuleCall)cModifiersAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVariable_declaratorParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNamesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNamesVariable_declaratorParserRuleCall_3_1_0 = (RuleCall)cNamesAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variable_declaration:
		//	modifiers+=Modifier* type=Type name=Variable_declarator ("," names+=Variable_declarator)* ";";
		@Override public ParserRule getRule() { return rule; }

		//modifiers+=Modifier* type=Type name=Variable_declarator ("," names+=Variable_declarator)* ";"
		public Group getGroup() { return cGroup; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_0() { return cModifiersAssignment_0; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_0_0() { return cModifiersModifierParserRuleCall_0_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=Variable_declarator
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Variable_declarator
		public RuleCall getNameVariable_declaratorParserRuleCall_2_0() { return cNameVariable_declaratorParserRuleCall_2_0; }

		//("," names+=Variable_declarator)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//names+=Variable_declarator
		public Assignment getNamesAssignment_3_1() { return cNamesAssignment_3_1; }

		//Variable_declarator
		public RuleCall getNamesVariable_declaratorParserRuleCall_3_1_0() { return cNamesVariable_declaratorParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class Variable_declaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_declarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInitializerAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInitializerVariable_initializerParserRuleCall_2_1_0 = (RuleCall)cInitializerAssignment_2_1.eContents().get(0);
		
		//Variable_declarator:
		//	name=ID ("[" "]" | "[]")* ("=" initializer=Variable_initializer)?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID ("[" "]" | "[]")* ("=" initializer=Variable_initializer)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("[" "]" | "[]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_1() { return cRightSquareBracketKeyword_1_0_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }

		//("=" initializer=Variable_initializer)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//initializer=Variable_initializer
		public Assignment getInitializerAssignment_2_1() { return cInitializerAssignment_2_1; }

		//Variable_initializer
		public RuleCall getInitializerVariable_initializerParserRuleCall_2_1_0() { return cInitializerVariable_initializerParserRuleCall_2_1_0; }
	}

	public class Variable_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable_initializer");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//Variable_initializer:
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNumericExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNumericExpressionNumeric_ExpressionParserRuleCall_0_0_0 = (RuleCall)cNumericExpressionAssignment_0_0.eContents().get(0);
		private final Assignment cAuxAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_0_1_0 = (RuleCall)cAuxAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLogicalExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalExpressionLogical_ExpressionParserRuleCall_1_0_0 = (RuleCall)cLogicalExpressionAssignment_1_0.eContents().get(0);
		private final Assignment cAuxAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_1_1_0 = (RuleCall)cAuxAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cBitExpressionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBitExpressionBit_ExpressionParserRuleCall_2_0_0 = (RuleCall)cBitExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cAuxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_2_1_0 = (RuleCall)cAuxAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cCastExpressionAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCastExpressionCast_ExpressionParserRuleCall_3_0_0_0 = (RuleCall)cCastExpressionAssignment_3_0_0.eContents().get(0);
		private final Assignment cAuxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_3_1_0 = (RuleCall)cAuxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cCreatingExpressionAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cCreatingExpressionCreating_ExpressionParserRuleCall_4_0_0_0 = (RuleCall)cCreatingExpressionAssignment_4_0_0.eContents().get(0);
		private final Assignment cAuxAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_4_1_0 = (RuleCall)cAuxAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Assignment cLiteralExpressionAssignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cLiteralExpressionLiteral_ExpressionParserRuleCall_5_0_0_0 = (RuleCall)cLiteralExpressionAssignment_5_0_0.eContents().get(0);
		private final Assignment cAuxAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_5_1_0 = (RuleCall)cAuxAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cNullAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cNullNullKeyword_6_0_0 = (Keyword)cNullAssignment_6_0.eContents().get(0);
		private final Assignment cAuxAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_6_1_0 = (RuleCall)cAuxAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cSuperAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cSuperSuperKeyword_7_0_0 = (Keyword)cSuperAssignment_7_0.eContents().get(0);
		private final Assignment cAuxAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_7_1_0 = (RuleCall)cAuxAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cThisAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cThisThisKeyword_8_0_0 = (Keyword)cThisAssignment_8_0.eContents().get(0);
		private final Assignment cAuxAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_8_1_0 = (RuleCall)cAuxAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cNameAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_9_0_0 = (RuleCall)cNameAssignment_9_0.eContents().get(0);
		private final Assignment cAuxAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAuxExpression_auxParserRuleCall_9_1_0 = (RuleCall)cAuxAssignment_9_1.eContents().get(0);
		
		////|(expression=Expression) ('(' argList+=Arg_List ')') //a
		////|(expression=Expression) ('[' expression2=Expression ']') //a
		////|(expression=Expression) ('.' expression2=Expression)//a
		////|(expression=Expression) (',' expression2=Expression)//a
		////|(expression=Expression) ('instanceof' (name=Class_name))//a
		//Expression:
		//	numericExpression=Numeric_Expression aux=Expression_aux //B
		//	| logicalExpression=Logical_Expression aux= //B
		//	Expression_aux | bitExpression=Bit_Expression aux= //B
		//	Expression_aux | => (castExpression=Cast_Expression) aux= //B
		//	Expression_aux | => (creatingExpression=Creating_Expression) aux= //B
		//	Expression_aux | => (literalExpression=Literal_Expression) aux= //B
		//	Expression_aux | null="null" aux= //B
		//	Expression_aux | super="super" aux= //B
		//	Expression_aux | this="this" aux= //B
		//	Expression_aux | name=ID aux= //B
		//	Expression_aux;
		@Override public ParserRule getRule() { return rule; }

		//numericExpression=Numeric_Expression aux=Expression_aux //B
		//| logicalExpression=Logical_Expression aux= //B
		//Expression_aux | bitExpression=Bit_Expression aux= //B
		//Expression_aux | => (castExpression=Cast_Expression) aux= //B
		//Expression_aux | => (creatingExpression=Creating_Expression) aux= //B
		//Expression_aux | => (literalExpression=Literal_Expression) aux= //B
		//Expression_aux | null="null" aux= //B
		//Expression_aux | super="super" aux= //B
		//Expression_aux | this="this" aux= //B
		//Expression_aux | name=ID aux= //B
		//Expression_aux
		public Alternatives getAlternatives() { return cAlternatives; }

		//numericExpression=Numeric_Expression aux=Expression_aux //B
		public Group getGroup_0() { return cGroup_0; }

		//numericExpression=Numeric_Expression
		public Assignment getNumericExpressionAssignment_0_0() { return cNumericExpressionAssignment_0_0; }

		//Numeric_Expression
		public RuleCall getNumericExpressionNumeric_ExpressionParserRuleCall_0_0_0() { return cNumericExpressionNumeric_ExpressionParserRuleCall_0_0_0; }

		//aux=Expression_aux
		public Assignment getAuxAssignment_0_1() { return cAuxAssignment_0_1; }

		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_0_1_0() { return cAuxExpression_auxParserRuleCall_0_1_0; }

		//logicalExpression=Logical_Expression aux= //B
		//Expression_aux
		public Group getGroup_1() { return cGroup_1; }

		//logicalExpression=Logical_Expression
		public Assignment getLogicalExpressionAssignment_1_0() { return cLogicalExpressionAssignment_1_0; }

		//Logical_Expression
		public RuleCall getLogicalExpressionLogical_ExpressionParserRuleCall_1_0_0() { return cLogicalExpressionLogical_ExpressionParserRuleCall_1_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_1_1() { return cAuxAssignment_1_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_1_1_0() { return cAuxExpression_auxParserRuleCall_1_1_0; }

		//bitExpression=Bit_Expression aux= //B
		//Expression_aux
		public Group getGroup_2() { return cGroup_2; }

		//bitExpression=Bit_Expression
		public Assignment getBitExpressionAssignment_2_0() { return cBitExpressionAssignment_2_0; }

		//Bit_Expression
		public RuleCall getBitExpressionBit_ExpressionParserRuleCall_2_0_0() { return cBitExpressionBit_ExpressionParserRuleCall_2_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_2_1() { return cAuxAssignment_2_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_2_1_0() { return cAuxExpression_auxParserRuleCall_2_1_0; }

		//=> (castExpression=Cast_Expression) aux= //B
		//Expression_aux
		public Group getGroup_3() { return cGroup_3; }

		//=> (castExpression=Cast_Expression)
		public Group getGroup_3_0() { return cGroup_3_0; }

		//castExpression=Cast_Expression
		public Assignment getCastExpressionAssignment_3_0_0() { return cCastExpressionAssignment_3_0_0; }

		//Cast_Expression
		public RuleCall getCastExpressionCast_ExpressionParserRuleCall_3_0_0_0() { return cCastExpressionCast_ExpressionParserRuleCall_3_0_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_3_1() { return cAuxAssignment_3_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_3_1_0() { return cAuxExpression_auxParserRuleCall_3_1_0; }

		//=> (creatingExpression=Creating_Expression) aux= //B
		//Expression_aux
		public Group getGroup_4() { return cGroup_4; }

		//=> (creatingExpression=Creating_Expression)
		public Group getGroup_4_0() { return cGroup_4_0; }

		//creatingExpression=Creating_Expression
		public Assignment getCreatingExpressionAssignment_4_0_0() { return cCreatingExpressionAssignment_4_0_0; }

		//Creating_Expression
		public RuleCall getCreatingExpressionCreating_ExpressionParserRuleCall_4_0_0_0() { return cCreatingExpressionCreating_ExpressionParserRuleCall_4_0_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_4_1() { return cAuxAssignment_4_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_4_1_0() { return cAuxExpression_auxParserRuleCall_4_1_0; }

		//=> (literalExpression=Literal_Expression) aux= //B
		//Expression_aux
		public Group getGroup_5() { return cGroup_5; }

		//=> (literalExpression=Literal_Expression)
		public Group getGroup_5_0() { return cGroup_5_0; }

		//literalExpression=Literal_Expression
		public Assignment getLiteralExpressionAssignment_5_0_0() { return cLiteralExpressionAssignment_5_0_0; }

		//Literal_Expression
		public RuleCall getLiteralExpressionLiteral_ExpressionParserRuleCall_5_0_0_0() { return cLiteralExpressionLiteral_ExpressionParserRuleCall_5_0_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_5_1() { return cAuxAssignment_5_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_5_1_0() { return cAuxExpression_auxParserRuleCall_5_1_0; }

		//null="null" aux= //B
		//Expression_aux
		public Group getGroup_6() { return cGroup_6; }

		//null="null"
		public Assignment getNullAssignment_6_0() { return cNullAssignment_6_0; }

		//"null"
		public Keyword getNullNullKeyword_6_0_0() { return cNullNullKeyword_6_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_6_1() { return cAuxAssignment_6_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_6_1_0() { return cAuxExpression_auxParserRuleCall_6_1_0; }

		//super="super" aux= //B
		//Expression_aux
		public Group getGroup_7() { return cGroup_7; }

		//super="super"
		public Assignment getSuperAssignment_7_0() { return cSuperAssignment_7_0; }

		//"super"
		public Keyword getSuperSuperKeyword_7_0_0() { return cSuperSuperKeyword_7_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_7_1() { return cAuxAssignment_7_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_7_1_0() { return cAuxExpression_auxParserRuleCall_7_1_0; }

		//this="this" aux= //B
		//Expression_aux
		public Group getGroup_8() { return cGroup_8; }

		//this="this"
		public Assignment getThisAssignment_8_0() { return cThisAssignment_8_0; }

		//"this"
		public Keyword getThisThisKeyword_8_0_0() { return cThisThisKeyword_8_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_8_1() { return cAuxAssignment_8_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_8_1_0() { return cAuxExpression_auxParserRuleCall_8_1_0; }

		//name=ID aux= //B
		//Expression_aux
		public Group getGroup_9() { return cGroup_9; }

		//name=ID
		public Assignment getNameAssignment_9_0() { return cNameAssignment_9_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_9_0_0() { return cNameIDTerminalRuleCall_9_0_0; }

		//aux= //B
		//Expression_aux
		public Assignment getAuxAssignment_9_1() { return cAuxAssignment_9_1; }

		////B
		//Expression_aux
		public RuleCall getAuxExpression_auxParserRuleCall_9_1_0() { return cAuxExpression_auxParserRuleCall_9_1_0; }
	}

	public class Expression_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression_aux");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cArgListAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cArgListArg_ListParserRuleCall_0_0_1_0 = (RuleCall)cArgListAssignment_0_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cAux1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAux1Expression_auxParserRuleCall_0_1_0 = (RuleCall)cAux1Assignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpression2Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpression2Assignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cAux2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAux2Expression_auxParserRuleCall_1_1_0 = (RuleCall)cAux2Assignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cFullStopKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cExpression2Assignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cExpression2ExpressionParserRuleCall_2_0_1_0 = (RuleCall)cExpression2Assignment_2_0_1.eContents().get(0);
		private final Assignment cAux3Assignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAux3Expression_auxParserRuleCall_2_1_0 = (RuleCall)cAux3Assignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0_1_0 = (RuleCall)cExpressionAssignment_3_0_1.eContents().get(0);
		private final Assignment cAux4Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAux4Expression_auxParserRuleCall_3_1_0 = (RuleCall)cAux4Assignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cInstanceofKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cNameAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cNameClass_nameParserRuleCall_4_0_1_0 = (RuleCall)cNameAssignment_4_0_1.eContents().get(0);
		private final Assignment cAux5Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAux5Expression_auxParserRuleCall_4_1_0 = (RuleCall)cAux5Assignment_4_1.eContents().get(0);
		private final Action cExpression_auxAction_5 = (Action)cAlternatives.eContents().get(5);
		
		////)*
		//Expression_aux:
		//	("(" argList+=Arg_List ")") aux1=Expression_aux //(
		//	| ("[" expression2+=Expression "]") aux2=Expression_aux | ("." expression2+=Expression) aux3=Expression_aux | (","
		//	expression+=Expression) aux4=Expression_aux | ("instanceof" name+=Class_name) aux5=Expression_aux | {Expression_aux};
		@Override public ParserRule getRule() { return rule; }

		//(=> "(" argList+=Arg_List ")") aux1=Expression_aux //(
		//| ("[" expression2+=Expression "]") aux2=Expression_aux | ("." expression2+=Expression) aux3=Expression_aux | (","
		//expression+=Expression) aux4=Expression_aux | ("instanceof" name+=Class_name) aux5=Expression_aux | {Expression_aux}
		public Alternatives getAlternatives() { return cAlternatives; }

		//(=> "(" argList+=Arg_List ")") aux1=Expression_aux
		public Group getGroup_0() { return cGroup_0; }

		//=> "(" argList+=Arg_List ")"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_0_0_0() { return cLeftParenthesisKeyword_0_0_0; }

		//argList+=Arg_List
		public Assignment getArgListAssignment_0_0_1() { return cArgListAssignment_0_0_1; }

		//Arg_List
		public RuleCall getArgListArg_ListParserRuleCall_0_0_1_0() { return cArgListArg_ListParserRuleCall_0_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_0_2() { return cRightParenthesisKeyword_0_0_2; }

		//aux1=Expression_aux
		public Assignment getAux1Assignment_0_1() { return cAux1Assignment_0_1; }

		//Expression_aux
		public RuleCall getAux1Expression_auxParserRuleCall_0_1_0() { return cAux1Expression_auxParserRuleCall_0_1_0; }

		//(=> "[" expression2+=Expression "]") aux2=Expression_aux
		public Group getGroup_1() { return cGroup_1; }

		//=> "[" expression2+=Expression "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> "["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_1_0_1() { return cExpression2Assignment_1_0_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_0_1_0() { return cExpression2ExpressionParserRuleCall_1_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }

		//aux2=Expression_aux
		public Assignment getAux2Assignment_1_1() { return cAux2Assignment_1_1; }

		//Expression_aux
		public RuleCall getAux2Expression_auxParserRuleCall_1_1_0() { return cAux2Expression_auxParserRuleCall_1_1_0; }

		//(=> "." expression2+=Expression) aux3=Expression_aux
		public Group getGroup_2() { return cGroup_2; }

		//=> "." expression2+=Expression
		public Group getGroup_2_0() { return cGroup_2_0; }

		//=> "."
		public Keyword getFullStopKeyword_2_0_0() { return cFullStopKeyword_2_0_0; }

		//expression2+=Expression
		public Assignment getExpression2Assignment_2_0_1() { return cExpression2Assignment_2_0_1; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_2_0_1_0() { return cExpression2ExpressionParserRuleCall_2_0_1_0; }

		//aux3=Expression_aux
		public Assignment getAux3Assignment_2_1() { return cAux3Assignment_2_1; }

		//Expression_aux
		public RuleCall getAux3Expression_auxParserRuleCall_2_1_0() { return cAux3Expression_auxParserRuleCall_2_1_0; }

		//(=> "," expression+=Expression) aux4=Expression_aux
		public Group getGroup_3() { return cGroup_3; }

		//=> "," expression+=Expression
		public Group getGroup_3_0() { return cGroup_3_0; }

		//=> ","
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }

		//expression+=Expression
		public Assignment getExpressionAssignment_3_0_1() { return cExpressionAssignment_3_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0_1_0() { return cExpressionExpressionParserRuleCall_3_0_1_0; }

		//aux4=Expression_aux
		public Assignment getAux4Assignment_3_1() { return cAux4Assignment_3_1; }

		//Expression_aux
		public RuleCall getAux4Expression_auxParserRuleCall_3_1_0() { return cAux4Expression_auxParserRuleCall_3_1_0; }

		//(=> "instanceof" name+=Class_name) aux5=Expression_aux
		public Group getGroup_4() { return cGroup_4; }

		//=> "instanceof" name+=Class_name
		public Group getGroup_4_0() { return cGroup_4_0; }

		//=> "instanceof"
		public Keyword getInstanceofKeyword_4_0_0() { return cInstanceofKeyword_4_0_0; }

		//name+=Class_name
		public Assignment getNameAssignment_4_0_1() { return cNameAssignment_4_0_1; }

		//Class_name
		public RuleCall getNameClass_nameParserRuleCall_4_0_1_0() { return cNameClass_nameParserRuleCall_4_0_1_0; }

		//aux5=Expression_aux
		public Assignment getAux5Assignment_4_1() { return cAux5Assignment_4_1; }

		//Expression_aux
		public RuleCall getAux5Expression_auxParserRuleCall_4_1_0() { return cAux5Expression_auxParserRuleCall_4_1_0; }

		//{Expression_aux}
		public Action getExpression_auxAction_5() { return cExpression_auxAction_5; }
	}

	public class Float_LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Float_Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecimalDigits1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDecimalDigits1DECIMAL_DIGITSTerminalRuleCall_0_0 = (RuleCall)cDecimalDigits1Assignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDecimalDigits2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDecimalDigits2DECIMAL_DIGITSTerminalRuleCall_2_0 = (RuleCall)cDecimalDigits2Assignment_2.eContents().get(0);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpEXPOENT_PARTTerminalRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Assignment cFloatTypeSufixAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFloatTypeSufixFLOAT_TYPE_SUFIXTerminalRuleCall_4_0 = (RuleCall)cFloatTypeSufixAssignment_4.eContents().get(0);
		
		//Float_Literal:
		//	decimalDigits1=DECIMAL_DIGITS "." decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART? floatTypeSufix=FLOAT_TYPE_SUFIX?;
		@Override public ParserRule getRule() { return rule; }

		//decimalDigits1=DECIMAL_DIGITS "." decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART? floatTypeSufix=FLOAT_TYPE_SUFIX?
		public Group getGroup() { return cGroup; }

		//decimalDigits1=DECIMAL_DIGITS
		public Assignment getDecimalDigits1Assignment_0() { return cDecimalDigits1Assignment_0; }

		//DECIMAL_DIGITS
		public RuleCall getDecimalDigits1DECIMAL_DIGITSTerminalRuleCall_0_0() { return cDecimalDigits1DECIMAL_DIGITSTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//decimalDigits2=DECIMAL_DIGITS?
		public Assignment getDecimalDigits2Assignment_2() { return cDecimalDigits2Assignment_2; }

		//DECIMAL_DIGITS
		public RuleCall getDecimalDigits2DECIMAL_DIGITSTerminalRuleCall_2_0() { return cDecimalDigits2DECIMAL_DIGITSTerminalRuleCall_2_0; }

		//exp=EXPOENT_PART?
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//EXPOENT_PART
		public RuleCall getExpEXPOENT_PARTTerminalRuleCall_3_0() { return cExpEXPOENT_PARTTerminalRuleCall_3_0; }

		//floatTypeSufix=FLOAT_TYPE_SUFIX?
		public Assignment getFloatTypeSufixAssignment_4() { return cFloatTypeSufixAssignment_4; }

		//FLOAT_TYPE_SUFIX
		public RuleCall getFloatTypeSufixFLOAT_TYPE_SUFIXTerminalRuleCall_4_0() { return cFloatTypeSufixFLOAT_TYPE_SUFIXTerminalRuleCall_4_0; }
	}

	public class Literal_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal_Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cExpAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpHEXATerminalRuleCall_0_0_0_0 = (RuleCall)cExpAssignment_0_0_0.eContents().get(0);
		private final Keyword cLKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cExp1Assignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cExp1DECIMAL_DIGITSTerminalRuleCall_0_1_0_0 = (RuleCall)cExp1Assignment_0_1_0.eContents().get(0);
		private final Keyword cLKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cExp2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExp2Float_LiteralParserRuleCall_1_0 = (RuleCall)cExp2Assignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringSTRINGTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cCharAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cCharCHARTerminalRuleCall_3_0 = (RuleCall)cCharAssignment_3.eContents().get(0);
		
		//Literal_Expression:
		//	(exp=HEXA "l"? | exp1=DECIMAL_DIGITS "l"?) | exp2=Float_Literal | string=STRING | char=CHAR;
		@Override public ParserRule getRule() { return rule; }

		//(exp=HEXA "l"? | exp1=DECIMAL_DIGITS "l"?) | exp2=Float_Literal | string=STRING | char=CHAR
		public Alternatives getAlternatives() { return cAlternatives; }

		//exp=HEXA "l"? | exp1=DECIMAL_DIGITS "l"?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//exp=HEXA "l"?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//exp=HEXA
		public Assignment getExpAssignment_0_0_0() { return cExpAssignment_0_0_0; }

		//HEXA
		public RuleCall getExpHEXATerminalRuleCall_0_0_0_0() { return cExpHEXATerminalRuleCall_0_0_0_0; }

		//"l"?
		public Keyword getLKeyword_0_0_1() { return cLKeyword_0_0_1; }

		//exp1=DECIMAL_DIGITS "l"?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//exp1=DECIMAL_DIGITS
		public Assignment getExp1Assignment_0_1_0() { return cExp1Assignment_0_1_0; }

		//DECIMAL_DIGITS
		public RuleCall getExp1DECIMAL_DIGITSTerminalRuleCall_0_1_0_0() { return cExp1DECIMAL_DIGITSTerminalRuleCall_0_1_0_0; }

		//"l"?
		public Keyword getLKeyword_0_1_1() { return cLKeyword_0_1_1; }

		//exp2=Float_Literal
		public Assignment getExp2Assignment_1() { return cExp2Assignment_1; }

		//Float_Literal
		public RuleCall getExp2Float_LiteralParserRuleCall_1_0() { return cExp2Float_LiteralParserRuleCall_1_0; }

		//string=STRING
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_2_0() { return cStringSTRINGTerminalRuleCall_2_0; }

		//char=CHAR
		public Assignment getCharAssignment_3() { return cCharAssignment_3; }

		//CHAR
		public RuleCall getCharCHARTerminalRuleCall_3_0() { return cCharCHARTerminalRuleCall_3_0; }
	}

	public class Creating_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Creating_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cClassNameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cClassNameClass_nameParserRuleCall_1_0_0_0 = (RuleCall)cClassNameAssignment_1_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cArgListAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cArgListArg_ListParserRuleCall_1_0_2_0 = (RuleCall)cArgListAssignment_1_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cTypeSpecifierAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cTypeSpecifierType_specifierParserRuleCall_1_1_0_0 = (RuleCall)cTypeSpecifierAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_1_2_0 = (Group)cAlternatives_1_1_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_2_0_0 = (Keyword)cGroup_1_1_2_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2_0_1 = (Keyword)cGroup_1_1_2_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1_2_1 = (Keyword)cAlternatives_1_1_2.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExpressionAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		
		//Creating_Expression:
		//	"new" (className=Class_name "(" argList=Arg_List ")" | typeSpecifier=Type_specifier ("[" expression=Expression "]")?
		//	("[" "]" | "[]")* | "(" expression=Expression ")");
		@Override public ParserRule getRule() { return rule; }

		//"new" (className=Class_name "(" argList=Arg_List ")" | typeSpecifier=Type_specifier ("[" expression=Expression "]")?
		//("[" "]" | "[]")* | "(" expression=Expression ")")
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//className=Class_name "(" argList=Arg_List ")" | typeSpecifier=Type_specifier ("[" expression=Expression "]")? ("[" "]" |
		//"[]")* | "(" expression=Expression ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//className=Class_name "(" argList=Arg_List ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//className=Class_name
		public Assignment getClassNameAssignment_1_0_0() { return cClassNameAssignment_1_0_0; }

		//Class_name
		public RuleCall getClassNameClass_nameParserRuleCall_1_0_0_0() { return cClassNameClass_nameParserRuleCall_1_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }

		//argList=Arg_List
		public Assignment getArgListAssignment_1_0_2() { return cArgListAssignment_1_0_2; }

		//Arg_List
		public RuleCall getArgListArg_ListParserRuleCall_1_0_2_0() { return cArgListArg_ListParserRuleCall_1_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }

		//typeSpecifier=Type_specifier ("[" expression=Expression "]")? ("[" "]" | "[]")*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//typeSpecifier=Type_specifier
		public Assignment getTypeSpecifierAssignment_1_1_0() { return cTypeSpecifierAssignment_1_1_0; }

		//Type_specifier
		public RuleCall getTypeSpecifierType_specifierParserRuleCall_1_1_0_0() { return cTypeSpecifierType_specifierParserRuleCall_1_1_0_0; }

		//("[" expression=Expression "]")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1_0() { return cLeftSquareBracketKeyword_1_1_1_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_1_1_1() { return cExpressionAssignment_1_1_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1_2() { return cRightSquareBracketKeyword_1_1_1_2; }

		//("[" "]" | "[]")*
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }

		//"[" "]"
		public Group getGroup_1_1_2_0() { return cGroup_1_1_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_2_0_0() { return cLeftSquareBracketKeyword_1_1_2_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2_0_1() { return cRightSquareBracketKeyword_1_1_2_0_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1_2_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1_2_1; }

		//"(" expression=Expression ")"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2_0() { return cLeftParenthesisKeyword_1_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2_1() { return cExpressionAssignment_1_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_2() { return cRightParenthesisKeyword_1_2_2; }
	}

	public class Cast_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Cast_Expression:
		//	"(" type=Type ")" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"(" type=Type ")" expression=Expression
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
	}

	public class Bit_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bit_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Bit_Expression:
		//	"~" expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//"~" expression=Expression
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class Logical_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Logical_Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Assignment cTrueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTrueTRUEParserRuleCall_1_0 = (RuleCall)cTrueAssignment_1.eContents().get(0);
		private final Assignment cFalseAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFalseFALSEParserRuleCall_2_0 = (RuleCall)cFalseAssignment_2.eContents().get(0);
		
		//Logical_Expression:
		//	"!" expression=Expression | true=TRUE | false=FALSE;
		@Override public ParserRule getRule() { return rule; }

		//"!" expression=Expression | true=TRUE | false=FALSE
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" expression=Expression
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_0() { return cExpressionExpressionParserRuleCall_0_1_0; }

		//true=TRUE
		public Assignment getTrueAssignment_1() { return cTrueAssignment_1; }

		//TRUE
		public RuleCall getTrueTRUEParserRuleCall_1_0() { return cTrueTRUEParserRuleCall_1_0; }

		//false=FALSE
		public Assignment getFalseAssignment_2() { return cFalseAssignment_2; }

		//FALSE
		public RuleCall getFalseFALSEParserRuleCall_2_0() { return cFalseFALSEParserRuleCall_2_0; }
	}

	public class FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FALSE");
		private final Keyword cFalseKeyword = (Keyword)rule.eContents().get(1);
		
		//FALSE:
		//	"false";
		@Override public ParserRule getRule() { return rule; }

		//"false"
		public Keyword getFalseKeyword() { return cFalseKeyword; }
	}

	public class TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TRUE");
		private final Keyword cTrueKeyword = (Keyword)rule.eContents().get(1);
		
		//TRUE:
		//	"true";
		@Override public ParserRule getRule() { return rule; }

		//"true"
		public Keyword getTrueKeyword() { return cTrueKeyword; }
	}

	public class Arg_ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg_List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionsAssignment_1_1.eContents().get(0);
		
		//Arg_List:
		//	expression=Expression ("," expressions+=Expression)*;
		@Override public ParserRule getRule() { return rule; }

		//expression=Expression ("," expressions+=Expression)*
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//("," expressions+=Expression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_1_1() { return cExpressionsAssignment_1_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_1_1_0() { return cExpressionsExpressionParserRuleCall_1_1_0; }
	}

	public class Numeric_ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Numeric_Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSinalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSinalAlternatives_0_0 = (Alternatives)cSinalAssignment_0.eContents().get(0);
		private final RuleCall cSinalMINUSTerminalRuleCall_0_0_0 = (RuleCall)cSinalAlternatives_0_0.eContents().get(0);
		private final RuleCall cSinalINCREMENTTerminalRuleCall_0_0_1 = (RuleCall)cSinalAlternatives_0_0.eContents().get(1);
		private final RuleCall cSinalDECREMENTTerminalRuleCall_0_0_2 = (RuleCall)cSinalAlternatives_0_0.eContents().get(2);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Numeric_Expression:
		//	sinal=(MINUS | INCREMENT | DECREMENT) expression=Expression;
		@Override public ParserRule getRule() { return rule; }

		//sinal=(MINUS | INCREMENT | DECREMENT) expression=Expression
		public Group getGroup() { return cGroup; }

		//sinal=(MINUS | INCREMENT | DECREMENT)
		public Assignment getSinalAssignment_0() { return cSinalAssignment_0; }

		//MINUS | INCREMENT | DECREMENT
		public Alternatives getSinalAlternatives_0_0() { return cSinalAlternatives_0_0; }

		//MINUS
		public RuleCall getSinalMINUSTerminalRuleCall_0_0_0() { return cSinalMINUSTerminalRuleCall_0_0_0; }

		//INCREMENT
		public RuleCall getSinalINCREMENTTerminalRuleCall_0_0_1() { return cSinalINCREMENTTerminalRuleCall_0_0_1; }

		//DECREMENT
		public RuleCall getSinalDECREMENTTerminalRuleCall_0_0_2() { return cSinalDECREMENTTerminalRuleCall_0_0_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameType_specifierParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Type:
		//	name=Type_specifier ("[" "]" | "[]")*;
		@Override public ParserRule getRule() { return rule; }

		//name=Type_specifier ("[" "]" | "[]")*
		public Group getGroup() { return cGroup; }

		//name=Type_specifier
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Type_specifier
		public RuleCall getNameType_specifierParserRuleCall_0_0() { return cNameType_specifierParserRuleCall_0_0; }

		//("[" "]" | "[]")*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"[" "]"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_1() { return cRightSquareBracketKeyword_1_0_1; }

		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }
	}

	public class Type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBooleanKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cByteKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCharKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cShortKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIntKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFloatKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLongKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final RuleCall cClass_nameParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Type_specifier:
		//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | Class_name;
		@Override public ParserRule getRule() { return rule; }

		//"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | Class_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//"boolean"
		public Keyword getBooleanKeyword_0() { return cBooleanKeyword_0; }

		//"byte"
		public Keyword getByteKeyword_1() { return cByteKeyword_1; }

		//"char"
		public Keyword getCharKeyword_2() { return cCharKeyword_2; }

		//"short"
		public Keyword getShortKeyword_3() { return cShortKeyword_3; }

		//"int"
		public Keyword getIntKeyword_4() { return cIntKeyword_4; }

		//"float"
		public Keyword getFloatKeyword_5() { return cFloatKeyword_5; }

		//"long"
		public Keyword getLongKeyword_6() { return cLongKeyword_6; }

		//"double"
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }

		//Class_name
		public RuleCall getClass_nameParserRuleCall_8() { return cClass_nameParserRuleCall_8; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMODTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTATICTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Modifier:
		//	MOD | STATIC;
		@Override public ParserRule getRule() { return rule; }

		//MOD | STATIC
		public Alternatives getAlternatives() { return cAlternatives; }

		//MOD
		public RuleCall getMODTerminalRuleCall_0() { return cMODTerminalRuleCall_0; }

		//STATIC
		public RuleCall getSTATICTerminalRuleCall_1() { return cSTATICTerminalRuleCall_1; }
	}

	public class Static_initializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Static_initializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStaticAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStaticSTATICTerminalRuleCall_0_0 = (RuleCall)cStaticAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameStatement_blockParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Static_initializer:
		//	static=STATIC name=Statement_block;
		@Override public ParserRule getRule() { return rule; }

		//static=STATIC name=Statement_block
		public Group getGroup() { return cGroup; }

		//static=STATIC
		public Assignment getStaticAssignment_0() { return cStaticAssignment_0; }

		//STATIC
		public RuleCall getStaticSTATICTerminalRuleCall_0_0() { return cStaticSTATICTerminalRuleCall_0_0; }

		//name=Statement_block
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Statement_block
		public RuleCall getNameStatement_blockParserRuleCall_1_0() { return cNameStatement_blockParserRuleCall_1_0; }
	}

	public class Statement_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatement_blockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Statement_block:
		//	{Statement_block} "{" statements+=Statement* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Statement_block} "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{Statement_block}
		public Action getStatement_blockAction_0() { return cStatement_blockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableVariable_declarationParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cIfStatementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIfStatementIf_StatementParserRuleCall_1_0 = (RuleCall)cIfStatementAssignment_1.eContents().get(0);
		private final Assignment cDoStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDoStatementDo_StatementParserRuleCall_2_0 = (RuleCall)cDoStatementAssignment_2.eContents().get(0);
		private final Assignment cWhileStatementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cWhileStatementWhile_StatementParserRuleCall_3_0 = (RuleCall)cWhileStatementAssignment_3.eContents().get(0);
		private final Assignment cForStatementAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cForStatementFor_StatementParserRuleCall_4_0 = (RuleCall)cForStatementAssignment_4.eContents().get(0);
		private final Assignment cSwitchStatementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cSwitchStatementSwitch_StatementParserRuleCall_5_0 = (RuleCall)cSwitchStatementAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cSynchronizedKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExpressionAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_6_2_0 = (RuleCall)cExpressionAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cStatementAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_6_4_0 = (RuleCall)cStatementAssignment_6_4.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cStatementAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cReturnKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cExpressionAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_7_1_1_0 = (RuleCall)cExpressionAssignment_7_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1_2 = (Keyword)cGroup_7_1.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cThrowKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cExpressionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_8_1_0 = (RuleCall)cExpressionAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final RuleCall cStatement_blockParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Assignment cTryAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cTryTry_statementParserRuleCall_10_0 = (RuleCall)cTryAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cNameAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_11_0_0 = (RuleCall)cNameAssignment_11_0.eContents().get(0);
		private final Keyword cColonKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cStatementAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_11_2_0 = (RuleCall)cStatementAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cStatementAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cBreakKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cNameAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_12_2_0 = (RuleCall)cNameAssignment_12_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cStatementAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cContinueKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cNameAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_13_2_0 = (RuleCall)cNameAssignment_13_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cStatementAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cSemicolonKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		
		//Statement:
		//	variable=Variable_declaration | ifStatement=If_Statement | doStatement=Do_Statement | whileStatement=While_Statement |
		//	forStatement=For_Statement | switchStatement=Switch_Statement | "synchronized" "(" expression=Expression ")"
		//	statement=Statement | {Statement} ("return" expression=Expression? ";") | "throw" expression=Expression ";" |
		//	Statement_block | try=Try_statement | name=ID ":" statement=Statement | {Statement} "break" name=ID? ";" | {Statement}
		//	"continue" name=ID? ";" | {Statement} ";";
		@Override public ParserRule getRule() { return rule; }

		//variable=Variable_declaration | ifStatement=If_Statement | doStatement=Do_Statement | whileStatement=While_Statement |
		//forStatement=For_Statement | switchStatement=Switch_Statement | "synchronized" "(" expression=Expression ")"
		//statement=Statement | {Statement} ("return" expression=Expression? ";") | "throw" expression=Expression ";" |
		//Statement_block | try=Try_statement | name=ID ":" statement=Statement | {Statement} "break" name=ID? ";" | {Statement}
		//"continue" name=ID? ";" | {Statement} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable=Variable_declaration
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//Variable_declaration
		public RuleCall getVariableVariable_declarationParserRuleCall_0_0() { return cVariableVariable_declarationParserRuleCall_0_0; }

		//ifStatement=If_Statement
		public Assignment getIfStatementAssignment_1() { return cIfStatementAssignment_1; }

		//If_Statement
		public RuleCall getIfStatementIf_StatementParserRuleCall_1_0() { return cIfStatementIf_StatementParserRuleCall_1_0; }

		//doStatement=Do_Statement
		public Assignment getDoStatementAssignment_2() { return cDoStatementAssignment_2; }

		//Do_Statement
		public RuleCall getDoStatementDo_StatementParserRuleCall_2_0() { return cDoStatementDo_StatementParserRuleCall_2_0; }

		//whileStatement=While_Statement
		public Assignment getWhileStatementAssignment_3() { return cWhileStatementAssignment_3; }

		//While_Statement
		public RuleCall getWhileStatementWhile_StatementParserRuleCall_3_0() { return cWhileStatementWhile_StatementParserRuleCall_3_0; }

		//forStatement=For_Statement
		public Assignment getForStatementAssignment_4() { return cForStatementAssignment_4; }

		//For_Statement
		public RuleCall getForStatementFor_StatementParserRuleCall_4_0() { return cForStatementFor_StatementParserRuleCall_4_0; }

		//switchStatement=Switch_Statement
		public Assignment getSwitchStatementAssignment_5() { return cSwitchStatementAssignment_5; }

		//Switch_Statement
		public RuleCall getSwitchStatementSwitch_StatementParserRuleCall_5_0() { return cSwitchStatementSwitch_StatementParserRuleCall_5_0; }

		//"synchronized" "(" expression=Expression ")" statement=Statement
		public Group getGroup_6() { return cGroup_6; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_6_0() { return cSynchronizedKeyword_6_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_6_2() { return cExpressionAssignment_6_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_2_0() { return cExpressionExpressionParserRuleCall_6_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }

		//statement=Statement
		public Assignment getStatementAssignment_6_4() { return cStatementAssignment_6_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_6_4_0() { return cStatementStatementParserRuleCall_6_4_0; }

		//{Statement} ("return" expression=Expression? ";")
		public Group getGroup_7() { return cGroup_7; }

		//{Statement}
		public Action getStatementAction_7_0() { return cStatementAction_7_0; }

		//"return" expression=Expression? ";"
		public Group getGroup_7_1() { return cGroup_7_1; }

		//"return"
		public Keyword getReturnKeyword_7_1_0() { return cReturnKeyword_7_1_0; }

		//expression=Expression?
		public Assignment getExpressionAssignment_7_1_1() { return cExpressionAssignment_7_1_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_7_1_1_0() { return cExpressionExpressionParserRuleCall_7_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1_2() { return cSemicolonKeyword_7_1_2; }

		//"throw" expression=Expression ";"
		public Group getGroup_8() { return cGroup_8; }

		//"throw"
		public Keyword getThrowKeyword_8_0() { return cThrowKeyword_8_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_8_1() { return cExpressionAssignment_8_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_8_1_0() { return cExpressionExpressionParserRuleCall_8_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8_2() { return cSemicolonKeyword_8_2; }

		//Statement_block
		public RuleCall getStatement_blockParserRuleCall_9() { return cStatement_blockParserRuleCall_9; }

		//try=Try_statement
		public Assignment getTryAssignment_10() { return cTryAssignment_10; }

		//Try_statement
		public RuleCall getTryTry_statementParserRuleCall_10_0() { return cTryTry_statementParserRuleCall_10_0; }

		//name=ID ":" statement=Statement
		public Group getGroup_11() { return cGroup_11; }

		//name=ID
		public Assignment getNameAssignment_11_0() { return cNameAssignment_11_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_11_0_0() { return cNameIDTerminalRuleCall_11_0_0; }

		//":"
		public Keyword getColonKeyword_11_1() { return cColonKeyword_11_1; }

		//statement=Statement
		public Assignment getStatementAssignment_11_2() { return cStatementAssignment_11_2; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_11_2_0() { return cStatementStatementParserRuleCall_11_2_0; }

		//{Statement} "break" name=ID? ";"
		public Group getGroup_12() { return cGroup_12; }

		//{Statement}
		public Action getStatementAction_12_0() { return cStatementAction_12_0; }

		//"break"
		public Keyword getBreakKeyword_12_1() { return cBreakKeyword_12_1; }

		//name=ID?
		public Assignment getNameAssignment_12_2() { return cNameAssignment_12_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_12_2_0() { return cNameIDTerminalRuleCall_12_2_0; }

		//";"
		public Keyword getSemicolonKeyword_12_3() { return cSemicolonKeyword_12_3; }

		//{Statement} "continue" name=ID? ";"
		public Group getGroup_13() { return cGroup_13; }

		//{Statement}
		public Action getStatementAction_13_0() { return cStatementAction_13_0; }

		//"continue"
		public Keyword getContinueKeyword_13_1() { return cContinueKeyword_13_1; }

		//name=ID?
		public Assignment getNameAssignment_13_2() { return cNameAssignment_13_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_13_2_0() { return cNameIDTerminalRuleCall_13_2_0; }

		//";"
		public Keyword getSemicolonKeyword_13_3() { return cSemicolonKeyword_13_3; }

		//{Statement} ";"
		public Group getGroup_14() { return cGroup_14; }

		//{Statement}
		public Action getStatementAction_14_0() { return cStatementAction_14_0; }

		//";"
		public Keyword getSemicolonKeyword_14_1() { return cSemicolonKeyword_14_1; }
	}

	public class Switch_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Switch_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitch_StatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cCaseKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_6_0_1_0 = (RuleCall)cExpressionsAssignment_6_0_1.eContents().get(0);
		private final Keyword cColonKeyword_6_0_2 = (Keyword)cGroup_6_0.eContents().get(2);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cDefaultKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Keyword cColonKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Assignment cStatementsAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_6_2_0 = (RuleCall)cStatementsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Switch_Statement:
		//	{Switch_Statement} "switch" "(" expression=Expression ")" "{" ("case" expressions+=Expression ":" | "default" ":" |
		//	statements+=Statement)* "}";
		@Override public ParserRule getRule() { return rule; }

		//{Switch_Statement} "switch" "(" expression=Expression ")" "{" ("case" expressions+=Expression ":" | "default" ":" |
		//statements+=Statement)* "}"
		public Group getGroup() { return cGroup; }

		//{Switch_Statement}
		public Action getSwitch_StatementAction_0() { return cSwitch_StatementAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("case" expressions+=Expression ":" | "default" ":" | statements+=Statement)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"case" expressions+=Expression ":"
		public Group getGroup_6_0() { return cGroup_6_0; }

		//"case"
		public Keyword getCaseKeyword_6_0_0() { return cCaseKeyword_6_0_0; }

		//expressions+=Expression
		public Assignment getExpressionsAssignment_6_0_1() { return cExpressionsAssignment_6_0_1; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_6_0_1_0() { return cExpressionsExpressionParserRuleCall_6_0_1_0; }

		//":"
		public Keyword getColonKeyword_6_0_2() { return cColonKeyword_6_0_2; }

		//"default" ":"
		public Group getGroup_6_1() { return cGroup_6_1; }

		//"default"
		public Keyword getDefaultKeyword_6_1_0() { return cDefaultKeyword_6_1_0; }

		//":"
		public Keyword getColonKeyword_6_1_1() { return cColonKeyword_6_1_1; }

		//statements+=Statement
		public Assignment getStatementsAssignment_6_2() { return cStatementsAssignment_6_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_6_2_0() { return cStatementsStatementParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class For_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "For_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVariableVariable_declarationParserRuleCall_2_0_0 = (RuleCall)cVariableAssignment_2_0.eContents().get(0);
		private final Assignment cPvAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cPvSemicolonKeyword_2_1_0 = (Keyword)cPvAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Assignment cExpressionAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_2_2_0_0 = (RuleCall)cExpressionAssignment_2_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_2_1 = (Keyword)cGroup_2_2.eContents().get(1);
		private final Assignment cExpression2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpression2ExpressionParserRuleCall_3_0 = (RuleCall)cExpression2Assignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpression3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpression3ExpressionParserRuleCall_5_0 = (RuleCall)cExpression3Assignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementStatementParserRuleCall_8_0 = (RuleCall)cStatementAssignment_8.eContents().get(0);
		
		//For_Statement:
		//	"for" "(" (variable=Variable_declaration | pv=";" | expression=Expression ";") expression2=Expression? ";"
		//	expression3=Expression? ";" ")" statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"for" "(" (variable=Variable_declaration | pv=";" | expression=Expression ";") expression2=Expression? ";"
		//expression3=Expression? ";" ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable=Variable_declaration | pv=";" | expression=Expression ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variable=Variable_declaration
		public Assignment getVariableAssignment_2_0() { return cVariableAssignment_2_0; }

		//Variable_declaration
		public RuleCall getVariableVariable_declarationParserRuleCall_2_0_0() { return cVariableVariable_declarationParserRuleCall_2_0_0; }

		//pv=";"
		public Assignment getPvAssignment_2_1() { return cPvAssignment_2_1; }

		//";"
		public Keyword getPvSemicolonKeyword_2_1_0() { return cPvSemicolonKeyword_2_1_0; }

		//expression=Expression ";"
		public Group getGroup_2_2() { return cGroup_2_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_2_0() { return cExpressionAssignment_2_2_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_2_0_0() { return cExpressionExpressionParserRuleCall_2_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_2_1() { return cSemicolonKeyword_2_2_1; }

		//expression2=Expression?
		public Assignment getExpression2Assignment_3() { return cExpression2Assignment_3; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_3_0() { return cExpression2ExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//expression3=Expression?
		public Assignment getExpression3Assignment_5() { return cExpression3Assignment_5; }

		//Expression
		public RuleCall getExpression3ExpressionParserRuleCall_5_0() { return cExpression3ExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//statement=Statement
		public Assignment getStatementAssignment_8() { return cStatementAssignment_8; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_8_0() { return cStatementStatementParserRuleCall_8_0; }
	}

	public class While_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "While_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//While_Statement:
		//	"while" "(" expression=Expression ")" statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"while" "(" expression=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}

	public class Do_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Do_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Do_Statement:
		//	"do" statement=Statement "while" "(" expression=Expression ")" ";";
		@Override public ParserRule getRule() { return rule; }

		//"do" statement=Statement "while" "(" expression=Expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class If_StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "If_Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseStatementStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		
		//If_Statement:
		//	"if" "(" expression=Expression ")" statement=Statement ("else" elseStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" expression=Expression ")" statement=Statement ("else" elseStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }

		//(=> "else" elseStatement=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//elseStatement=Statement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//Statement
		public RuleCall getElseStatementStatementParserRuleCall_5_1_0() { return cElseStatementStatementParserRuleCall_5_1_0; }
	}

	public class Try_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Try_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTryTRYTerminalRuleCall_0_0 = (RuleCall)cTryAssignment_0.eContents().get(0);
		private final Assignment cTryStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTryStatementStatementParserRuleCall_1_0 = (RuleCall)cTryStatementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCatchsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCatchsCATCHTerminalRuleCall_2_0_0 = (RuleCall)cCatchsAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cParametersAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_2_2_0 = (RuleCall)cParametersAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cCatchStatementsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cCatchStatementsStatementParserRuleCall_2_4_0 = (RuleCall)cCatchStatementsAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFinallyAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFinallyFINALLYTerminalRuleCall_3_0_0 = (RuleCall)cFinallyAssignment_3_0.eContents().get(0);
		private final Assignment cFinallyStatementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFinallyStatementStatementParserRuleCall_3_1_0 = (RuleCall)cFinallyStatementAssignment_3_1.eContents().get(0);
		
		//Try_statement:
		//	try=TRY tryStatement=Statement (=> catchs+=CATCH "(" parameters+=Parameter ")" catchStatements+=Statement)* (=>
		//	finally=FINALLY finallyStatement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//try=TRY tryStatement=Statement (=> catchs+=CATCH "(" parameters+=Parameter ")" catchStatements+=Statement)* (=>
		//finally=FINALLY finallyStatement=Statement)?
		public Group getGroup() { return cGroup; }

		//try=TRY
		public Assignment getTryAssignment_0() { return cTryAssignment_0; }

		//TRY
		public RuleCall getTryTRYTerminalRuleCall_0_0() { return cTryTRYTerminalRuleCall_0_0; }

		//tryStatement=Statement
		public Assignment getTryStatementAssignment_1() { return cTryStatementAssignment_1; }

		//Statement
		public RuleCall getTryStatementStatementParserRuleCall_1_0() { return cTryStatementStatementParserRuleCall_1_0; }

		//(=> catchs+=CATCH "(" parameters+=Parameter ")" catchStatements+=Statement)*
		public Group getGroup_2() { return cGroup_2; }

		//=> catchs+=CATCH
		public Assignment getCatchsAssignment_2_0() { return cCatchsAssignment_2_0; }

		//CATCH
		public RuleCall getCatchsCATCHTerminalRuleCall_2_0_0() { return cCatchsCATCHTerminalRuleCall_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_2() { return cParametersAssignment_2_2; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_2_0() { return cParametersParameterParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//catchStatements+=Statement
		public Assignment getCatchStatementsAssignment_2_4() { return cCatchStatementsAssignment_2_4; }

		//Statement
		public RuleCall getCatchStatementsStatementParserRuleCall_2_4_0() { return cCatchStatementsStatementParserRuleCall_2_4_0; }

		//(=> finally=FINALLY finallyStatement=Statement)?
		public Group getGroup_3() { return cGroup_3; }

		//=> finally=FINALLY
		public Assignment getFinallyAssignment_3_0() { return cFinallyAssignment_3_0; }

		//FINALLY
		public RuleCall getFinallyFINALLYTerminalRuleCall_3_0_0() { return cFinallyFINALLYTerminalRuleCall_3_0_0; }

		//finallyStatement=Statement
		public Assignment getFinallyStatementAssignment_3_1() { return cFinallyStatementAssignment_3_1; }

		//Statement
		public RuleCall getFinallyStatementStatementParserRuleCall_3_1_0() { return cFinallyStatementStatementParserRuleCall_3_1_0; }
	}

	public class Package_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePackage_nameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package_statement:
		//	"package" name=Package_name ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" name=Package_name ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=Package_name
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Package_name
		public RuleCall getNamePackage_nameParserRuleCall_1_0() { return cNamePackage_nameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class Package_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPackage_name_auxParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name:
		//	ID Package_name_aux;
		@Override public ParserRule getRule() { return rule; }

		//ID Package_name_aux
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//Package_name_aux
		public RuleCall getPackage_name_auxParserRuleCall_1() { return cPackage_name_auxParserRuleCall_1; }
	}

	public class Package_name_auxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package_name_aux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package_name_aux:
		//	("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//("." ID)*
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class Import_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cClassnameAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cClassnameClass_nameParserRuleCall_1_0_0_0 = (RuleCall)cClassnameAssignment_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cPackagenameAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cPackagenamePackage_nameParserRuleCall_1_1_0_0 = (RuleCall)cPackagenameAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		
		//Import_statement:
		//	"import" (classname=Class_name ";" | packagename=Package_name "." "*" ";" ";");
		@Override public ParserRule getRule() { return rule; }

		//"import" (classname=Class_name ";" | packagename=Package_name "." "*" ";" ";")
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//classname=Class_name ";" | packagename=Package_name "." "*" ";" ";"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//classname=Class_name ";"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//classname=Class_name
		public Assignment getClassnameAssignment_1_0_0() { return cClassnameAssignment_1_0_0; }

		//Class_name
		public RuleCall getClassnameClass_nameParserRuleCall_1_0_0_0() { return cClassnameClass_nameParserRuleCall_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_0_1() { return cSemicolonKeyword_1_0_1; }

		//packagename=Package_name "." "*" ";" ";"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//packagename=Package_name
		public Assignment getPackagenameAssignment_1_1_0() { return cPackagenameAssignment_1_1_0; }

		//Package_name
		public RuleCall getPackagenamePackage_nameParserRuleCall_1_1_0_0() { return cPackagenamePackage_nameParserRuleCall_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_2() { return cAsteriskKeyword_1_1_2; }

		//";"
		public Keyword getSemicolonKeyword_1_1_3() { return cSemicolonKeyword_1_1_3; }

		//";"
		public Keyword getSemicolonKeyword_1_1_4() { return cSemicolonKeyword_1_1_4; }
	}

	public class Class_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Cuidado com Package_name Class_name e Interface_name pq sao iguais - ambiguidade
		//Class_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}

	public class Interface_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interface_name");
		private final RuleCall cPackage_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Interface_name:
		//	Package_name;
		@Override public ParserRule getRule() { return rule; }

		//Package_name
		public RuleCall getPackage_nameParserRuleCall() { return cPackage_nameParserRuleCall; }
	}
	
	
	private final HeadElements pHead;
	private final Compilation_unitElements pCompilation_unit;
	private final Type_declarationElements pType_declaration;
	private final Interface_declarationElements pInterface_declaration;
	private final Class_declarationElements pClass_declaration;
	private final Field_declarationElements pField_declaration;
	private final Method_declarationElements pMethod_declaration;
	private final Constructor_declarationElements pConstructor_declaration;
	private final Parameter_listElements pParameter_list;
	private final ParameterElements pParameter;
	private final Variable_declarationElements pVariable_declaration;
	private final Variable_declaratorElements pVariable_declarator;
	private final Variable_initializerElements pVariable_initializer;
	private final ExpressionElements pExpression;
	private final Expression_auxElements pExpression_aux;
	private final Float_LiteralElements pFloat_Literal;
	private final Literal_ExpressionElements pLiteral_Expression;
	private final Creating_ExpressionElements pCreating_Expression;
	private final Cast_ExpressionElements pCast_Expression;
	private final Bit_ExpressionElements pBit_Expression;
	private final Logical_ExpressionElements pLogical_Expression;
	private final FALSEElements pFALSE;
	private final TRUEElements pTRUE;
	private final Arg_ListElements pArg_List;
	private final Numeric_ExpressionElements pNumeric_Expression;
	private final TerminalRule tDECREMENT;
	private final TerminalRule tINCREMENT;
	private final TypeElements pType;
	private final Type_specifierElements pType_specifier;
	private final ModifierElements pModifier;
	private final TerminalRule tSTATIC;
	private final Static_initializerElements pStatic_initializer;
	private final Statement_blockElements pStatement_block;
	private final StatementElements pStatement;
	private final Switch_StatementElements pSwitch_Statement;
	private final For_StatementElements pFor_Statement;
	private final While_StatementElements pWhile_Statement;
	private final Do_StatementElements pDo_Statement;
	private final If_StatementElements pIf_Statement;
	private final Try_statementElements pTry_statement;
	private final Package_statementElements pPackage_statement;
	private final Package_nameElements pPackage_name;
	private final Package_name_auxElements pPackage_name_aux;
	private final Import_statementElements pImport_statement;
	private final Class_nameElements pClass_name;
	private final Interface_nameElements pInterface_name;
	private final TerminalRule tHEXA;
	private final TerminalRule tEXPONENTIAL;
	private final TerminalRule tEXPOENT_PART;
	private final TerminalRule tPLUS;
	private final TerminalRule tMINUS;
	private final TerminalRule tMOD;
	private final TerminalRule tTRY;
	private final TerminalRule tCATCH;
	private final TerminalRule tFINALLY;
	private final TerminalRule tFLOAT_TYPE_SUFIX;
	private final TerminalRule tID;
	private final TerminalRule tDECIMAL_DIGITS;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tCHAR;
	private final TerminalRule tDOC_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public JavaGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pHead = new HeadElements();
		this.pCompilation_unit = new Compilation_unitElements();
		this.pType_declaration = new Type_declarationElements();
		this.pInterface_declaration = new Interface_declarationElements();
		this.pClass_declaration = new Class_declarationElements();
		this.pField_declaration = new Field_declarationElements();
		this.pMethod_declaration = new Method_declarationElements();
		this.pConstructor_declaration = new Constructor_declarationElements();
		this.pParameter_list = new Parameter_listElements();
		this.pParameter = new ParameterElements();
		this.pVariable_declaration = new Variable_declarationElements();
		this.pVariable_declarator = new Variable_declaratorElements();
		this.pVariable_initializer = new Variable_initializerElements();
		this.pExpression = new ExpressionElements();
		this.pExpression_aux = new Expression_auxElements();
		this.pFloat_Literal = new Float_LiteralElements();
		this.pLiteral_Expression = new Literal_ExpressionElements();
		this.pCreating_Expression = new Creating_ExpressionElements();
		this.pCast_Expression = new Cast_ExpressionElements();
		this.pBit_Expression = new Bit_ExpressionElements();
		this.pLogical_Expression = new Logical_ExpressionElements();
		this.pFALSE = new FALSEElements();
		this.pTRUE = new TRUEElements();
		this.pArg_List = new Arg_ListElements();
		this.pNumeric_Expression = new Numeric_ExpressionElements();
		this.tDECREMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECREMENT");
		this.tINCREMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INCREMENT");
		this.pType = new TypeElements();
		this.pType_specifier = new Type_specifierElements();
		this.pModifier = new ModifierElements();
		this.tSTATIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STATIC");
		this.pStatic_initializer = new Static_initializerElements();
		this.pStatement_block = new Statement_blockElements();
		this.pStatement = new StatementElements();
		this.pSwitch_Statement = new Switch_StatementElements();
		this.pFor_Statement = new For_StatementElements();
		this.pWhile_Statement = new While_StatementElements();
		this.pDo_Statement = new Do_StatementElements();
		this.pIf_Statement = new If_StatementElements();
		this.pTry_statement = new Try_statementElements();
		this.pPackage_statement = new Package_statementElements();
		this.pPackage_name = new Package_nameElements();
		this.pPackage_name_aux = new Package_name_auxElements();
		this.pImport_statement = new Import_statementElements();
		this.pClass_name = new Class_nameElements();
		this.pInterface_name = new Interface_nameElements();
		this.tHEXA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXA");
		this.tEXPONENTIAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENTIAL");
		this.tEXPOENT_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPOENT_PART");
		this.tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS");
		this.tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS");
		this.tMOD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MOD");
		this.tTRY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TRY");
		this.tCATCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CATCH");
		this.tFINALLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FINALLY");
		this.tFLOAT_TYPE_SUFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_TYPE_SUFIX");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tDECIMAL_DIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_DIGITS");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHAR");
		this.tDOC_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOC_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.java.Java".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Head:
	//	elements+=Compilation_unit;
	public HeadElements getHeadAccess() {
		return pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}

	//Compilation_unit:
	//	{Compilation_unit} package=Package_statement? imports+=Import_statement* type_declarations+=Type_declaration*;
	public Compilation_unitElements getCompilation_unitAccess() {
		return pCompilation_unit;
	}
	
	public ParserRule getCompilation_unitRule() {
		return getCompilation_unitAccess().getRule();
	}

	//Type_declaration:
	//	doc=DOC_COMMENT? (name=Class_declaration | name=Interface_declaration) ";";
	public Type_declarationElements getType_declarationAccess() {
		return pType_declaration;
	}
	
	public ParserRule getType_declarationRule() {
		return getType_declarationAccess().getRule();
	}

	//Interface_declaration:
	//	modifiers+=Modifier* "interface" interfaceName=ID ("extends" extend=Interface_name ("," extends+=Interface_name)*)?
	//	"{" "}";
	public Interface_declarationElements getInterface_declarationAccess() {
		return pInterface_declaration;
	}
	
	public ParserRule getInterface_declarationRule() {
		return getInterface_declarationAccess().getRule();
	}

	//Class_declaration:
	//	modifiers+=Modifier* "class" className=ID ("extends" extend=Class_name)? ("implements" implement=Interface_name (","
	//	implements+=Interface_name)*)? "{" fields+=Field_declaration* "}";
	public Class_declarationElements getClass_declarationAccess() {
		return pClass_declaration;
	}
	
	public ParserRule getClass_declarationRule() {
		return getClass_declarationAccess().getRule();
	}

	//Field_declaration:
	//	doc=DOC_COMMENT? (name=Variable_declaration | name=Constructor_declaration | name=Method_declaration) |
	//	name=Static_initializer | debug=";";
	public Field_declarationElements getField_declarationAccess() {
		return pField_declaration;
	}
	
	public ParserRule getField_declarationRule() {
		return getField_declarationAccess().getRule();
	}

	//Method_declaration:
	//	modifiers+=Modifier* type=Type name=ID "(" parameter=Parameter_list? ")" ("[" "]" | "[]")* (statement=Statement_block
	//	| debug=";");
	public Method_declarationElements getMethod_declarationAccess() {
		return pMethod_declaration;
	}
	
	public ParserRule getMethod_declarationRule() {
		return getMethod_declarationAccess().getRule();
	}

	//Constructor_declaration:
	//	modifiers+=Modifier* name=ID "(" parameters=Parameter_list? ")" statement=Statement_block;
	public Constructor_declarationElements getConstructor_declarationAccess() {
		return pConstructor_declaration;
	}
	
	public ParserRule getConstructor_declarationRule() {
		return getConstructor_declarationAccess().getRule();
	}

	//Parameter_list:
	//	parameter=Parameter ("," parameters+=Parameter)*;
	public Parameter_listElements getParameter_listAccess() {
		return pParameter_list;
	}
	
	public ParserRule getParameter_listRule() {
		return getParameter_listAccess().getRule();
	}

	//Parameter:
	//	type=Type name=ID ("[" "]" | "[]")*;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Variable_declaration:
	//	modifiers+=Modifier* type=Type name=Variable_declarator ("," names+=Variable_declarator)* ";";
	public Variable_declarationElements getVariable_declarationAccess() {
		return pVariable_declaration;
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//Variable_declarator:
	//	name=ID ("[" "]" | "[]")* ("=" initializer=Variable_initializer)?;
	public Variable_declaratorElements getVariable_declaratorAccess() {
		return pVariable_declarator;
	}
	
	public ParserRule getVariable_declaratorRule() {
		return getVariable_declaratorAccess().getRule();
	}

	//Variable_initializer:
	//	expression=Expression;
	public Variable_initializerElements getVariable_initializerAccess() {
		return pVariable_initializer;
	}
	
	public ParserRule getVariable_initializerRule() {
		return getVariable_initializerAccess().getRule();
	}

	////|(expression=Expression) ('(' argList+=Arg_List ')') //a
	////|(expression=Expression) ('[' expression2=Expression ']') //a
	////|(expression=Expression) ('.' expression2=Expression)//a
	////|(expression=Expression) (',' expression2=Expression)//a
	////|(expression=Expression) ('instanceof' (name=Class_name))//a
	//Expression:
	//	numericExpression=Numeric_Expression aux=Expression_aux //B
	//	| logicalExpression=Logical_Expression aux= //B
	//	Expression_aux | bitExpression=Bit_Expression aux= //B
	//	Expression_aux | => (castExpression=Cast_Expression) aux= //B
	//	Expression_aux | => (creatingExpression=Creating_Expression) aux= //B
	//	Expression_aux | => (literalExpression=Literal_Expression) aux= //B
	//	Expression_aux | null="null" aux= //B
	//	Expression_aux | super="super" aux= //B
	//	Expression_aux | this="this" aux= //B
	//	Expression_aux | name=ID aux= //B
	//	Expression_aux;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////)*
	//Expression_aux:
	//	("(" argList+=Arg_List ")") aux1=Expression_aux //(
	//	| ("[" expression2+=Expression "]") aux2=Expression_aux | ("." expression2+=Expression) aux3=Expression_aux | (","
	//	expression+=Expression) aux4=Expression_aux | ("instanceof" name+=Class_name) aux5=Expression_aux | {Expression_aux};
	public Expression_auxElements getExpression_auxAccess() {
		return pExpression_aux;
	}
	
	public ParserRule getExpression_auxRule() {
		return getExpression_auxAccess().getRule();
	}

	//Float_Literal:
	//	decimalDigits1=DECIMAL_DIGITS "." decimalDigits2=DECIMAL_DIGITS? exp=EXPOENT_PART? floatTypeSufix=FLOAT_TYPE_SUFIX?;
	public Float_LiteralElements getFloat_LiteralAccess() {
		return pFloat_Literal;
	}
	
	public ParserRule getFloat_LiteralRule() {
		return getFloat_LiteralAccess().getRule();
	}

	//Literal_Expression:
	//	(exp=HEXA "l"? | exp1=DECIMAL_DIGITS "l"?) | exp2=Float_Literal | string=STRING | char=CHAR;
	public Literal_ExpressionElements getLiteral_ExpressionAccess() {
		return pLiteral_Expression;
	}
	
	public ParserRule getLiteral_ExpressionRule() {
		return getLiteral_ExpressionAccess().getRule();
	}

	//Creating_Expression:
	//	"new" (className=Class_name "(" argList=Arg_List ")" | typeSpecifier=Type_specifier ("[" expression=Expression "]")?
	//	("[" "]" | "[]")* | "(" expression=Expression ")");
	public Creating_ExpressionElements getCreating_ExpressionAccess() {
		return pCreating_Expression;
	}
	
	public ParserRule getCreating_ExpressionRule() {
		return getCreating_ExpressionAccess().getRule();
	}

	//Cast_Expression:
	//	"(" type=Type ")" expression=Expression;
	public Cast_ExpressionElements getCast_ExpressionAccess() {
		return pCast_Expression;
	}
	
	public ParserRule getCast_ExpressionRule() {
		return getCast_ExpressionAccess().getRule();
	}

	//Bit_Expression:
	//	"~" expression=Expression;
	public Bit_ExpressionElements getBit_ExpressionAccess() {
		return pBit_Expression;
	}
	
	public ParserRule getBit_ExpressionRule() {
		return getBit_ExpressionAccess().getRule();
	}

	//Logical_Expression:
	//	"!" expression=Expression | true=TRUE | false=FALSE;
	public Logical_ExpressionElements getLogical_ExpressionAccess() {
		return pLogical_Expression;
	}
	
	public ParserRule getLogical_ExpressionRule() {
		return getLogical_ExpressionAccess().getRule();
	}

	//FALSE:
	//	"false";
	public FALSEElements getFALSEAccess() {
		return pFALSE;
	}
	
	public ParserRule getFALSERule() {
		return getFALSEAccess().getRule();
	}

	//TRUE:
	//	"true";
	public TRUEElements getTRUEAccess() {
		return pTRUE;
	}
	
	public ParserRule getTRUERule() {
		return getTRUEAccess().getRule();
	}

	//Arg_List:
	//	expression=Expression ("," expressions+=Expression)*;
	public Arg_ListElements getArg_ListAccess() {
		return pArg_List;
	}
	
	public ParserRule getArg_ListRule() {
		return getArg_ListAccess().getRule();
	}

	//Numeric_Expression:
	//	sinal=(MINUS | INCREMENT | DECREMENT) expression=Expression;
	public Numeric_ExpressionElements getNumeric_ExpressionAccess() {
		return pNumeric_Expression;
	}
	
	public ParserRule getNumeric_ExpressionRule() {
		return getNumeric_ExpressionAccess().getRule();
	}

	//terminal DECREMENT:
	//	"--";
	public TerminalRule getDECREMENTRule() {
		return tDECREMENT;
	} 

	//terminal INCREMENT:
	//	"++";
	public TerminalRule getINCREMENTRule() {
		return tINCREMENT;
	} 

	//Type:
	//	name=Type_specifier ("[" "]" | "[]")*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Type_specifier:
	//	"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | Class_name;
	public Type_specifierElements getType_specifierAccess() {
		return pType_specifier;
	}
	
	public ParserRule getType_specifierRule() {
		return getType_specifierAccess().getRule();
	}

	//Modifier:
	//	MOD | STATIC;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//terminal STATIC:
	//	"static";
	public TerminalRule getSTATICRule() {
		return tSTATIC;
	} 

	//Static_initializer:
	//	static=STATIC name=Statement_block;
	public Static_initializerElements getStatic_initializerAccess() {
		return pStatic_initializer;
	}
	
	public ParserRule getStatic_initializerRule() {
		return getStatic_initializerAccess().getRule();
	}

	//Statement_block:
	//	{Statement_block} "{" statements+=Statement* "}";
	public Statement_blockElements getStatement_blockAccess() {
		return pStatement_block;
	}
	
	public ParserRule getStatement_blockRule() {
		return getStatement_blockAccess().getRule();
	}

	//Statement:
	//	variable=Variable_declaration | ifStatement=If_Statement | doStatement=Do_Statement | whileStatement=While_Statement |
	//	forStatement=For_Statement | switchStatement=Switch_Statement | "synchronized" "(" expression=Expression ")"
	//	statement=Statement | {Statement} ("return" expression=Expression? ";") | "throw" expression=Expression ";" |
	//	Statement_block | try=Try_statement | name=ID ":" statement=Statement | {Statement} "break" name=ID? ";" | {Statement}
	//	"continue" name=ID? ";" | {Statement} ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Switch_Statement:
	//	{Switch_Statement} "switch" "(" expression=Expression ")" "{" ("case" expressions+=Expression ":" | "default" ":" |
	//	statements+=Statement)* "}";
	public Switch_StatementElements getSwitch_StatementAccess() {
		return pSwitch_Statement;
	}
	
	public ParserRule getSwitch_StatementRule() {
		return getSwitch_StatementAccess().getRule();
	}

	//For_Statement:
	//	"for" "(" (variable=Variable_declaration | pv=";" | expression=Expression ";") expression2=Expression? ";"
	//	expression3=Expression? ";" ")" statement=Statement;
	public For_StatementElements getFor_StatementAccess() {
		return pFor_Statement;
	}
	
	public ParserRule getFor_StatementRule() {
		return getFor_StatementAccess().getRule();
	}

	//While_Statement:
	//	"while" "(" expression=Expression ")" statement=Statement;
	public While_StatementElements getWhile_StatementAccess() {
		return pWhile_Statement;
	}
	
	public ParserRule getWhile_StatementRule() {
		return getWhile_StatementAccess().getRule();
	}

	//Do_Statement:
	//	"do" statement=Statement "while" "(" expression=Expression ")" ";";
	public Do_StatementElements getDo_StatementAccess() {
		return pDo_Statement;
	}
	
	public ParserRule getDo_StatementRule() {
		return getDo_StatementAccess().getRule();
	}

	//If_Statement:
	//	"if" "(" expression=Expression ")" statement=Statement ("else" elseStatement=Statement)?;
	public If_StatementElements getIf_StatementAccess() {
		return pIf_Statement;
	}
	
	public ParserRule getIf_StatementRule() {
		return getIf_StatementAccess().getRule();
	}

	//Try_statement:
	//	try=TRY tryStatement=Statement (=> catchs+=CATCH "(" parameters+=Parameter ")" catchStatements+=Statement)* (=>
	//	finally=FINALLY finallyStatement=Statement)?;
	public Try_statementElements getTry_statementAccess() {
		return pTry_statement;
	}
	
	public ParserRule getTry_statementRule() {
		return getTry_statementAccess().getRule();
	}

	//Package_statement:
	//	"package" name=Package_name ";";
	public Package_statementElements getPackage_statementAccess() {
		return pPackage_statement;
	}
	
	public ParserRule getPackage_statementRule() {
		return getPackage_statementAccess().getRule();
	}

	//Package_name:
	//	ID Package_name_aux;
	public Package_nameElements getPackage_nameAccess() {
		return pPackage_name;
	}
	
	public ParserRule getPackage_nameRule() {
		return getPackage_nameAccess().getRule();
	}

	//Package_name_aux:
	//	("." ID)*;
	public Package_name_auxElements getPackage_name_auxAccess() {
		return pPackage_name_aux;
	}
	
	public ParserRule getPackage_name_auxRule() {
		return getPackage_name_auxAccess().getRule();
	}

	//Import_statement:
	//	"import" (classname=Class_name ";" | packagename=Package_name "." "*" ";" ";");
	public Import_statementElements getImport_statementAccess() {
		return pImport_statement;
	}
	
	public ParserRule getImport_statementRule() {
		return getImport_statementAccess().getRule();
	}

	////Cuidado com Package_name Class_name e Interface_name pq sao iguais - ambiguidade
	//Class_name:
	//	Package_name;
	public Class_nameElements getClass_nameAccess() {
		return pClass_name;
	}
	
	public ParserRule getClass_nameRule() {
		return getClass_nameAccess().getRule();
	}

	//Interface_name:
	//	Package_name;
	public Interface_nameElements getInterface_nameAccess() {
		return pInterface_name;
	}
	
	public ParserRule getInterface_nameRule() {
		return getInterface_nameAccess().getRule();
	}

	////| ('0'..'7')* 
	//terminal HEXA:
	//	"0" "x" ("0".."9" "a".."f")*;
	public TerminalRule getHEXARule() {
		return tHEXA;
	} 

	//terminal EXPONENTIAL:
	//	"e" | "e+" | "e-";
	public TerminalRule getEXPONENTIALRule() {
		return tEXPONENTIAL;
	} 

	//terminal EXPOENT_PART:
	//	EXPONENTIAL DECIMAL_DIGITS;
	public TerminalRule getEXPOENT_PARTRule() {
		return tEXPOENT_PART;
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return tPLUS;
	} 

	//terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return tMINUS;
	} 

	//terminal MOD:
	//	"public" | "private" | "protected" | "final" | "native" | "synchronized" | "abstract" | "threadsafe" | "transient";
	public TerminalRule getMODRule() {
		return tMOD;
	} 

	//terminal TRY:
	//	"try";
	public TerminalRule getTRYRule() {
		return tTRY;
	} 

	//terminal CATCH:
	//	"catch";
	public TerminalRule getCATCHRule() {
		return tCATCH;
	} 

	//terminal FINALLY:
	//	"finally";
	public TerminalRule getFINALLYRule() {
		return tFINALLY;
	} 

	//terminal FLOAT_TYPE_SUFIX:
	//	"f" | "d";
	public TerminalRule getFLOAT_TYPE_SUFIXRule() {
		return tFLOAT_TYPE_SUFIX;
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "$") ("a".."z" | "A".."Z" | "_" | "0".."9" | "$" | "À".."￿")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal DECIMAL_DIGITS returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getDECIMAL_DIGITSRule() {
		return tDECIMAL_DIGITS;
	} 

	//terminal STRING:
	//	"\""->"\"";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal CHAR:
	//	"\'" . "\'";
	public TerminalRule getCHARRule() {
		return tCHAR;
	} 

	//terminal DOC_COMMENT:
	//	"/ **";
	public TerminalRule getDOC_COMMENTRule() {
		return tDOC_COMMENT;
	} 
}
