grammar org.xtext.java.Java hidden(WS, ML_COMMENT, SL_COMMENT)

generate java "http://www.xtext.org/java/Java"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
Head :
	elements += Compilation_unit
;

Compilation_unit:
	 {Compilation_unit} package = (Package_statement)? imports+=Import_statement* type_declarations += Type_declaration*
;

Type_declaration:
	doc=DOC_COMMENT? (name=Class_declaration | name=Interface_declaration) ';'
;

Interface_declaration:
	modifiers+=Modifier* 'interface' interfaceName=ID
	('extends' extend=Interface_name (',' extends+=(Interface_name))*)? 
	'{'(fields+=Field_declaration*) '}'
;

Class_declaration:
	modifiers+=Modifier* 'class' className=ID 
	('extends' extend=Class_name)?
	('implements' implement=Interface_name (',' implements+=(Interface_name))*)? 
	'{' (fields+=Field_declaration*)'}'
;

Field_declaration:
	(doc=DOC_COMMENT? (
		name=Variable_declaration
		| name=Constructor_declaration
		| name=Method_declaration
	))
	|(name=Static_initializer) 
	| debug=';'
;

Method_declaration:
	modifiers+=Modifier* type=Type name=ID '(' parameter=Parameter_list? ')' (('['']')|('[]'))* ((statement = Statement_block) | debug=';')
;

Constructor_declaration:
	modifiers+=Modifier* name=ID '(' (parameters=Parameter_list)? ')' statement=Statement_block
;

Parameter_list:
	parameter=Parameter (',' parameters+=Parameter)*
;

Parameter:
	type=Type name=ID (('['']')|('[]'))*
;

Variable_declaration:
	modifiers+=Modifier* type=Type name=Variable_declarator (',' names+= Variable_declarator)* ';'
;

Variable_declarator:
	name=ID (('['']')|('[]'))* ('=' initializer=Variable_initializer)?
;

Variable_initializer:
	(expression=Expression)
	|({Variable_initializer}=>'{' (variableInitializer1=Variable_initializer (',' variableIniatializer2+=Variable_initializer)* (',')?)? '}')
	
;

Expression:
	=>((numericExpression3=Numeric_Expression_NR) ) aux=Expression_aux	
	|(logicalExpression=Logical_Expression_NR) aux=Expression_aux
	|(bitExpression=Bit_Expression_NR) aux=Expression_aux
	|=>(castExpression=Cast_Expression) aux=Expression_aux
	|=>(creatingExpression=Creating_Expression) aux=Expression_aux
	|(literalExpression=Literal_Expression) aux=Expression_aux
	|(null='null') aux=Expression_aux 
	|(super='super') aux=Expression_aux
	|(this='this') aux=Expression_aux
	|(name=ID) aux=Expression_aux	 
;

Expression_aux :
	 (('(' argList+=Arg_List ')')) aux=Expression_aux
	 |(('[' expression2=Expression ']')) aux=Expression_aux
	 |(('.' expression2=Expression)) aux=Expression_aux
	 |((',' expression2=Expression)) aux=Expression_aux 
	 |(('instanceof' (name=Class_name))) aux=Expression_aux
	 |(sgin=(INCREMENT|DECREMENT) aux=Expression_aux)
	 |(sinalNumeric=( PLUS | "+=" | MINUS | "-=" | "*" | "*=" | "/" | "/=" | "%" | "%=" ) exp2=Expression aux=Expression_aux)
	 |(testingSign=(">"|"<"|">="|"<="|"=="|"!=") exp1=Expression aux=Expression_aux)
	 |((logicalSign=( "|" | "|=" | "^" | "^=" | "||=" | "%" | "%=") | ampersand=Ampersand_Rule) exp1=Expression aux=Expression_aux)
	 |(WAT exp1=Expression ":" exp2=Expression aux=Expression_aux)
	 |(stringSign=(PLUS | "+=") exp1=Expression aux=Expression_aux)
	 |(bitSign=( ">>=" | "<<" | ">>" | ">>>" ) expressionBit=Expression aux=Expression_aux)
	 | {Expression_aux}
;

terminal WAT:
	"?"
;
Ampersand_Rule:
	(a1=AMPERSAND (a2=AMPERSAND|"=")?)
;

terminal AMPERSAND:
	"ampersand"
;
Float_Literal:
	decimalDigits1=DECIMAL_DIGITS '.' (decimalDigits2=DECIMAL_DIGITS)? (exp=EXPOENT_PART)?/*(expoentPart=Expoent_part)?*/ (floatTypeSufix=FLOAT_TYPE_SUFIX)?
;

terminal EXPONENTIAL:
	'e' | 'e+' | 'e-'
;

Literal_Expression:
	((exp=HEXA 'l'?) | (exp1=DECIMAL_DIGITS 'l'?))
	| exp2=Float_Literal
	| (string = STRING)
	| (char=CHAR)
;

terminal STRING:
	'"' -> '"'
;

Creating_Expression:
	'new' (
		(className=Class_name '(' argList=Arg_List ')')
		|(typeSpecifier=Type_specifier ('[' expression=Expression ']')? ('['']' | '[]')*)
		|('(' expression=Expression ')')
		)
;

Cast_Expression:
	('(' type=Type ')' expression=Expression)
;

Bit_Expression_NR:
	('~' expression=Expression)
;

Logical_Expression_NR:
	('!' expression=Expression)
	| true=TRUE
	| false=FALSE
;

FALSE:
	'false'
;

TRUE:
	'true'
;

Arg_List:
	expression=Expression (',' expressions+=Expression)*
;


Numeric_Expression_NR:
	sinal_numeric=(MINUS|INCREMENT|DECREMENT) expression=Expression
;


terminal DECREMENT:
	'--'
;

terminal INCREMENT:
	'++'
;

Type:
	name=Type_specifier (('['']')|('[]'))*
;

Type_specifier:
	    "boolean" 
      | "byte" 
      | "char" 
      | "short" 
      | "int" 
      | "float" 
      | "long" 
      | "double" 
      | Class_name
;


Modifier :
	MOD | STATIC
;

terminal STATIC :
	'static'
;

Static_initializer:
	static=STATIC name=Statement_block 
;

Statement_block:
	{Statement_block} '{' (statements+=Statement*) '}'
;

Statement:
	 (variable = Variable_declaration)
	|(expressionx=Expression)
	|(ifStatement=If_Statement)
	|(doStatement=Do_Statement)
	|(whileStatement=While_Statement)
	|(forStatement=For_Statement)
	|(switchStatement=Switch_Statement) 
	|(Statement_block)
	|(try=Try_statement)
	|(name=ID ':' statement=Statement) 
	|{Statement}'break' name=ID? ';'
	|{Statement}'continue' name=ID? ';'
	|{Statement}';'
;

Switch_Statement:{Switch_Statement}
	'switch' '(' expression=Expression  ')' '{'
	(('case' expressions+=Expression  ':')|('default' ':')|(statements+=Statement))*
	'}'
;

For_Statement:
	'for' '(' (variable=Variable_declaration| pv=';' | (expression=Expression ';') )
	(expression2=Expression)? ';'
	(expression3=Expression)? ';'
	')' statement=Statement
;

While_Statement:
	'while' '(' expression=Expression ')' statement=Statement
;

Do_Statement:
	'do' statement=Statement 'while' '(' expression=Expression ')' ';'
;

If_Statement:
	'if' '(' expression=Expression  ')' statement=Statement  
	(=> 'else' elseStatement=Statement)?
;

Try_statement:
	try=TRY tryStatement=Statement 
	(=> catchs+=CATCH '('parameters+=Parameter ')' catchStatements+=Statement )*
	(=> finally=FINALLY finallyStatement=Statement)?
;

Package_statement:
	'package' name=Package_name ';'
;


Package_name:
	ID Package_name_aux
;

Package_name_aux:
	('.' ID)*
;	

Import_statement:
	'import' ((classname = Class_name ';') | (packagename=Package_name '.' '*' ';' ';'))  
;

//Cuidado com Package_name Class_name e Interface_name pq sao iguais - ambiguidade
Class_name:
	Package_name
;

Interface_name:
	Package_name
;


terminal EXPOENT_PART:
	EXPONENTIAL (DECIMAL_DIGITS) 
;

terminal CHAR:
	"'" . "'"
;

terminal PLUS:
	'+'
;

terminal MINUS:
	'-'
;

terminal MOD:
		"public" 
      | "private" 
      | "protected"  
      | "final" 
      | "native" 
      | "synchronized" 
      | "abstract" 
      | "threadsafe" 
      | "transient" 	
;


terminal TRY:
	'try'
;

terminal CATCH:
	'catch'
;
terminal FINALLY:
	'finally'
;

terminal FLOAT_TYPE_SUFIX:
	('f'|'d')	
;

terminal ID:
	('a'..'z'|'A'..'Z'|'_' | '$')('a'..'z'|'A'..'Z'|'_'|'0'..'9' | '$' | '\u00C0'..'\uFFFF')*	
;

terminal HEXA:
	//| ('0'..'7')* 
	('0' 'x' ('0'..'9' 'a'..'f')* )
;

terminal DECIMAL_DIGITS returns ecore::EInt:
	('0'..'9')+
;

terminal ML_COMMENT  : 
  '/*' -> '*/';

terminal SL_COMMENT : 
  '//' !('\n'|'\r')* ('\r'? '\n')?;
 
terminal WS  : 
  (' '|'\t'|'\r'|'\n')+;
 
terminal ANY_OTHER: 
  .;

terminal DOC_COMMENT :
	'/**'
;
