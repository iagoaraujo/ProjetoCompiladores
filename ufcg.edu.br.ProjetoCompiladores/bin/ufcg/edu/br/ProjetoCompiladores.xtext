grammar org.xtext.java.Java hidden(WS, ML_COMMENT, SL_COMMENT)

generate java "http://www.xtext.org/java/Java"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Head :
	elements += Compilation_unit
;

Compilation_unit:
	 {Compilation_unit} package = (Package_statement)? imports+=Import_statement* type_declarations += Type_declaration*
;

Type_declaration:
	doc=DOC_COMMENT? (name=Class_declaration | name=Interface_declaration) ';'
;

Interface_declaration:
	modifiers+=Modifier* 'interface' interfaceName=ID
	('extends' extend=Interface_name (',' extends+=(Interface_name))*)? 
	'{' '}'
;

Class_declaration:
	modifiers+=Modifier* 'class' className=ID 
	('extends' extend=Class_name)?
	('implements' implement=Interface_name (',' implements+=(Interface_name))*)? 
	'{' (fields+=Field_declaration*)'}'
;

Field_declaration:
	(doc=DOC_COMMENT? (
		name=Variable_declaration
		| name=Constructor_declaration
		| name=Method_declaration
	))
	|(name=Static_initializer) 
	| debug=';'
;

Method_declaration:
	modifiers+=Modifier* type=Type name=ID '(' parameter=Parameter_list? ')' (('['']')|('[]'))* ((statement = Statement_block) | debug=';')
;

Constructor_declaration:
	modifiers+=Modifier* name=ID '(' (parameters=Parameter_list)? ')' statement=Statement_block
;

Parameter_list:
	parameter=Parameter (',' parameters+=Parameter)*
;

Parameter:
	type=Type name=ID (('['']')|('[]'))*
;

Variable_declaration:
	modifiers+=Modifier* type=Type name=Variable_declarator (',' names+= Variable_declarator)* ';'
;

Variable_declarator:
	name=ID (('['']')|('[]'))* //('=' initializer=Variable_initializer)?
;

Type:
	name=Type_specifier (('['']')|('[]'))*
;

Type_specifier:
	    "boolean" 
      | "byte" 
      | "char" 
      | "short" 
      | "int" 
      | "float" 
      | "long" 
      | "double" 
      | Class_name
;


Modifier :
	MOD | STATIC
;

terminal STATIC :
	'static'
;

Static_initializer:
	static=STATIC name=Statement_block 
;

Statement_block:
	{Statement_block} '{' (statements+=Statement*) '}'
;

Statement:
	 (variable = Variable_declaration)
	|(ifStatement=If_Statement)
	|(doStatement=Do_Statement)
	|(whileStatement=While_Statement)
	|(forStatement=For_Statement)
	|(switchStatement=Switch_Statement) 
	|(Statement_block)
	|(try=Try_statement)
	|(name=ID ':' statement=Statement) 
	|{Statement}'break' name=ID? ';'
	|{Statement}'continue' name=ID? ';'
	|{Statement}';'
	
;

Switch_Statement:{Switch_Statement}
	'switch' '(' /*sExpression=Expression */ ')' '{'
	(('case' /*cExpressions+=Expression */ ':')|('default' ':')|(statements+=Statement))*
	'}'
;

For_Statement:
	'for' '(' (variable=Variable_declaration| pv=';' /*| (expression=Expression ';') */ )
	/*(expression2=Expression)?*/ ';'
	/*(expression3=Expression)?*/ ';'
	')' statement=Statement
;

While_Statement:
	'while' '(' /*expression=Expression */ ')' statement=Statement
;

Do_Statement:
	'do' statement=Statement 'while' '(' /*expression=Expression*/ ')' ';'
;

If_Statement:
	'if' '(' /*Expression */ ')' statement=Statement  (=> 'else' elseStatement=Statement)?
;

Try_statement:
	try=TRY tryStatement=Statement 
	(=> catchs+=CATCH '('parameters+=Parameter ')' catchStatements+=Statement )*
	(=> finally=FINALLY finallyStatement=Statement)?
;





Package_statement:
	'package' name=Package_name ';'
;


Package_name:
	ID Package_name_aux
;

Package_name_aux:
	('.' ID)*
;	

Import_statement:
	'import' ((classname = Class_name ';') | (packagename=Package_name '.' '*' ';' ';'))  
;


//Cuidado com Package_name Class_name e Interface_name pq sao iguais - ambiguidade
Class_name:
	Package_name
;

Interface_name:
	Package_name
;

terminal MOD:
		"public" 
      | "private" 
      | "protected"  
      | "final" 
      | "native" 
      | "synchronized" 
      | "abstract" 
      | "threadsafe" 
      | "transient" 	
;


terminal TRY:
	'try'
;

terminal CATCH:
	'catch'
;
terminal FINALLY:
	'finally'
;
terminal ID:
	('a'..'z'|'A'..'Z'|'_' | '$')('a'..'z'|'A'..'Z'|'_'|'0'..'9' | '$' | '\u00C0'..'\uFFFF')*	
;
terminal ML_COMMENT  : 
  '/*' -> '*/';
terminal SL_COMMENT : 
  '//' !('\n'|'\r')* ('\r'? '\n')?;
 
terminal WS  : 
  (' '|'\t'|'\r'|'\n')+;
 
terminal ANY_OTHER: 
  .;

terminal DOC_COMMENT :
	'/**'
;

