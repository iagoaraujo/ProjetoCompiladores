/*
 * generated by Xtext
 */
package org.xtext.java.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.java.java.Class_declaration
import org.xtext.java.java.Variable_declaration
import org.xtext.java.java.Field_declaration
import org.xtext.java.java.Static_initializer
import org.xtext.java.java.Statement_block
import org.xtext.java.java.Statement
import org.xtext.java.java.For_Statement
import org.eclipse.emf.ecore.EObject
import org.xtext.java.java.Variable_declarator

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class JavaGenerator implements IGenerator {
	
	Integer variables = 0;
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for(e: resource.allContents.toIterable.filter(Class_declaration)) {
    	fsa.generateFile(
      	e.className.toString() + ".txt",
      	e.compile)
  }
}
	def compile(Class_declaration cd)  '''
		«FOR f : cd.fields»
			«f.compileField»
		«ENDFOR»
	'''
	
	def compileField(Field_declaration declaration)'''
		«IF declaration.name != null»
			«IF declaration.name instanceof Variable_declaration »
				«var Variable_declaration vd = declaration.name as Variable_declaration»
				«vd.compileVariable»
			«ENDIF»
			
		«ENDIF»
		«IF declaration.staticInit !=null»
			«declaration.staticInit.compileStaticInit»
		«ENDIF»		
	'''
	
	
	def compileStaticInit(Static_initializer initializer) '''
		«initializer.name.compileStatementBlock»	
	'''
	
	def compileStatementBlock(Statement_block block) '''
		«FOR statement : block.statements»
			«statement.compileStatement»
		«ENDFOR»	
	'''
	
	def compileStatement(Statement statement) '''
		«IF statement.forStatement != null»
			«statement.forStatement.compileForStatement»
		«ENDIF»
	'''
	
	def compileForStatement(For_Statement forStatement) '''
		«IF forStatement.variable != null»
			«forStatement.variable.compileVariable»
		«ENDIF»
		«IF forStatement.expression2 != null»
			«IF forStatement.expression2.aux != null»
				«IF forStatement.expression2.aux.testingSign != null»
				
				«ENDIF»
			«ENDIF»
		«ENDIF»
	'''
	
	
	def  compileVariable(Variable_declaration declaration) '''
		«IF declaration.name.initializer != null»
			«IF declaration.name.initializer.expression.literalExpression != null»
				LD R«variables.toString()», #«declaration.name.initializer.expression.literalExpression.exp1»
				«increment»
			«ENDIF»
			«IF declaration.name.initializer.expression.logicalExpression != null»
				«IF declaration.name.initializer.expression.logicalExpression.le != null»
					LD R«variables.toString()», «declaration.name.initializer.expression.logicalExpression.le.toString»
				«ENDIF»
			«ENDIF»
			
			«ELSE»
				LD R«variables.toString()», «declaration.name.name.toString»
				«increment»
		«ENDIF»
		«IF !declaration.names.isEmpty»
			«FOR name: declaration.names»
				LD R«variables.toString()», «name.name.toString»
				«increment»
			«ENDFOR»
		«ENDIF» 	
	'''
	
	def void increment() {
		variables++;
	}
	
}
