/*
 * generated by Xtext
 */
grammar InternalJava;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.java.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.java.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.java.services.JavaGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private JavaGrammarAccess grammarAccess;
 	
    public InternalJavaParser(TokenStream input, JavaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Head";	
   	}
   	
   	@Override
   	protected JavaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleHead
entryRuleHead returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeadRule()); }
	 iv_ruleHead=ruleHead 
	 { $current=$iv_ruleHead.current; } 
	 EOF 
;

// Rule Head
ruleHead returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeadAccess().getElementsCompilation_unitParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleCompilation_unit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeadRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Compilation_unit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCompilation_unit
entryRuleCompilation_unit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilation_unitRule()); }
	 iv_ruleCompilation_unit=ruleCompilation_unit 
	 { $current=$iv_ruleCompilation_unit.current; } 
	 EOF 
;

// Rule Compilation_unit
ruleCompilation_unit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompilation_unitAccess().getCompilation_unitAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getPackagePackage_statementParserRuleCall_1_0()); 
	    }
		lv_package_1_0=rulePackage_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_1_0, 
        		"Package_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getImportsImport_statementParserRuleCall_2_0()); 
	    }
		lv_imports_2_0=ruleImport_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilation_unitAccess().getType_declarationsType_declarationParserRuleCall_3_0()); 
	    }
		lv_type_declarations_3_0=ruleType_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilation_unitRule());
	        }
       		add(
       			$current, 
       			"type_declarations",
        		lv_type_declarations_3_0, 
        		"Type_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleType_declaration
entryRuleType_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_declarationRule()); }
	 iv_ruleType_declaration=ruleType_declaration 
	 { $current=$iv_ruleType_declaration.current; } 
	 EOF 
;

// Rule Type_declaration
ruleType_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_doc_0_0=RULE_DOC_COMMENT
		{
			newLeafNode(lv_doc_0_0, grammarAccess.getType_declarationAccess().getDocDOC_COMMENTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getType_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"DOC_COMMENT");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getNameClass_declarationParserRuleCall_1_0_0()); 
	    }
		lv_name_1_0=ruleClass_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Class_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getType_declarationAccess().getNameInterface_declarationParserRuleCall_1_1_0()); 
	    }
		lv_name_2_0=ruleInterface_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getType_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Interface_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))this_EOL_3=RULE_EOL
    { 
    newLeafNode(this_EOL_3, grammarAccess.getType_declarationAccess().getEOLTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRuleInterface_declaration
entryRuleInterface_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_declarationRule()); }
	 iv_ruleInterface_declaration=ruleInterface_declaration 
	 { $current=$iv_ruleInterface_declaration.current; } 
	 EOF 
;

// Rule Interface_declaration
ruleInterface_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_INTERFACE_1=RULE_INTERFACE
    { 
    newLeafNode(this_INTERFACE_1, grammarAccess.getInterface_declarationAccess().getINTERFACETerminalRuleCall_1()); 
    }
(
(
		lv_interfaceName_2_0=RULE_ID
		{
			newLeafNode(lv_interfaceName_2_0, grammarAccess.getInterface_declarationAccess().getInterfaceNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterface_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"interfaceName",
        		lv_interfaceName_2_0, 
        		"ID");
	    }

)
)(this_EXTENDS_3=RULE_EXTENDS
    { 
    newLeafNode(this_EXTENDS_3, grammarAccess.getInterface_declarationAccess().getEXTENDSTerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getExtendInterface_nameParserRuleCall_3_1_0()); 
	    }
		lv_extend_4_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		set(
       			$current, 
       			"extend",
        		lv_extend_4_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_5=RULE_COMMA
    { 
    newLeafNode(this_COMMA_5, grammarAccess.getInterface_declarationAccess().getCOMMATerminalRuleCall_3_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getExtendsInterface_nameParserRuleCall_3_2_1_0()); 
	    }
		lv_extends_6_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"extends",
        		lv_extends_6_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?this_R_CURLY_BRACE_7=RULE_R_CURLY_BRACE
    { 
    newLeafNode(this_R_CURLY_BRACE_7, grammarAccess.getInterface_declarationAccess().getR_CURLY_BRACETerminalRuleCall_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterface_declarationAccess().getFieldsField_declarationParserRuleCall_5_0()); 
	    }
		lv_fields_8_0=ruleField_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterface_declarationRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_8_0, 
        		"Field_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_L_CURLY_BRACE_9=RULE_L_CURLY_BRACE
    { 
    newLeafNode(this_L_CURLY_BRACE_9, grammarAccess.getInterface_declarationAccess().getL_CURLY_BRACETerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleClass_declaration
entryRuleClass_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_declarationRule()); }
	 iv_ruleClass_declaration=ruleClass_declaration 
	 { $current=$iv_ruleClass_declaration.current; } 
	 EOF 
;

// Rule Class_declaration
ruleClass_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClass_declarationAccess().getClassKeyword_1());
    }
(
(
		lv_className_2_0=RULE_ID
		{
			newLeafNode(lv_className_2_0, grammarAccess.getClass_declarationAccess().getClassNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClass_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"ID");
	    }

)
)(this_EXTENDS_3=RULE_EXTENDS
    { 
    newLeafNode(this_EXTENDS_3, grammarAccess.getClass_declarationAccess().getEXTENDSTerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getExtendClass_nameParserRuleCall_3_1_0()); 
	    }
		lv_extend_4_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		set(
       			$current, 
       			"extend",
        		lv_extend_4_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='implements' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClass_declarationAccess().getImplementsKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getImplementInterface_nameParserRuleCall_4_1_0()); 
	    }
		lv_implement_6_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		set(
       			$current, 
       			"implement",
        		lv_implement_6_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_7=RULE_COMMA
    { 
    newLeafNode(this_COMMA_7, grammarAccess.getClass_declarationAccess().getCOMMATerminalRuleCall_4_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getImplementsInterface_nameParserRuleCall_4_2_1_0()); 
	    }
		lv_implements_8_0=ruleInterface_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"implements",
        		lv_implements_8_0, 
        		"Interface_name");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?this_R_CURLY_BRACE_9=RULE_R_CURLY_BRACE
    { 
    newLeafNode(this_R_CURLY_BRACE_9, grammarAccess.getClass_declarationAccess().getR_CURLY_BRACETerminalRuleCall_5()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClass_declarationAccess().getFieldsField_declarationParserRuleCall_6_0()); 
	    }
		lv_fields_10_0=ruleField_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClass_declarationRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_10_0, 
        		"Field_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_L_CURLY_BRACE_11=RULE_L_CURLY_BRACE
    { 
    newLeafNode(this_L_CURLY_BRACE_11, grammarAccess.getClass_declarationAccess().getL_CURLY_BRACETerminalRuleCall_7()); 
    }
)
;





// Entry rule entryRuleField_declaration
entryRuleField_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getField_declarationRule()); }
	 iv_ruleField_declaration=ruleField_declaration 
	 { $current=$iv_ruleField_declaration.current; } 
	 EOF 
;

// Rule Field_declaration
ruleField_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_doc_0_0=RULE_DOC_COMMENT
		{
			newLeafNode(lv_doc_0_0, grammarAccess.getField_declarationAccess().getDocDOC_COMMENTTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"doc",
        		lv_doc_0_0, 
        		"DOC_COMMENT");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getNameVariable_declarationParserRuleCall_0_1_0_0()); 
	    }
		lv_name_1_0=ruleVariable_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Variable_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getNameConstructor_declarationParserRuleCall_0_1_1_0()); 
	    }
		lv_name_2_0=ruleConstructor_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Constructor_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getNameMethod_declarationParserRuleCall_0_1_2_0()); 
	    }
		lv_name_3_0=ruleMethod_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Method_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getNameStatic_initializerParserRuleCall_1_0()); 
	    }
		lv_name_4_0=ruleStatic_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"Static_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getField_declarationAccess().getNameMethod_callParserRuleCall_2_0()); 
	    }
		lv_name_5_0=ruleMethod_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getField_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"Method_call");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_debug_6_0=RULE_EOL
		{
			newLeafNode(lv_debug_6_0, grammarAccess.getField_declarationAccess().getDebugEOLTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getField_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"debug",
        		lv_debug_6_0, 
        		"EOL");
	    }

)
))
;





// Entry rule entryRuleMethod_declaration
entryRuleMethod_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethod_declarationRule()); }
	 iv_ruleMethod_declaration=ruleMethod_declaration 
	 { $current=$iv_ruleMethod_declaration.current; } 
	 EOF 
;

// Rule Method_declaration
ruleMethod_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getMethod_declarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)this_RIGHT_PARENTHESIS_3=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_3, grammarAccess.getMethod_declarationAccess().getRIGHT_PARENTHESISTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getParameterParameter_listParserRuleCall_4_0()); 
	    }
		lv_parameter_4_0=ruleParameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_4_0, 
        		"Parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_LEFT_PARENTHESIS_5=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_5, grammarAccess.getMethod_declarationAccess().getLEFT_PARENTHESISTerminalRuleCall_5()); 
    }
((this_R_ABS_6=RULE_R_ABS
    { 
    newLeafNode(this_R_ABS_6, grammarAccess.getMethod_declarationAccess().getR_ABSTerminalRuleCall_6_0_0()); 
    }
this_L_ABS_7=RULE_L_ABS
    { 
    newLeafNode(this_L_ABS_7, grammarAccess.getMethod_declarationAccess().getL_ABSTerminalRuleCall_6_0_1()); 
    }
)
    |this_ABS_8=RULE_ABS
    { 
    newLeafNode(this_ABS_8, grammarAccess.getMethod_declarationAccess().getABSTerminalRuleCall_6_1()); 
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_declarationAccess().getStatementStatement_blockParserRuleCall_7_0_0()); 
	    }
		lv_statement_9_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_declarationRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_9_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_debug_10_0=RULE_EOL
		{
			newLeafNode(lv_debug_10_0, grammarAccess.getMethod_declarationAccess().getDebugEOLTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"debug",
        		lv_debug_10_0, 
        		"EOL");
	    }

)
)))
;





// Entry rule entryRuleMethod_call
entryRuleMethod_call returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethod_callRule()); }
	 iv_ruleMethod_call=ruleMethod_call 
	 { $current=$iv_ruleMethod_call.current; } 
	 EOF 
;

// Rule Method_call
ruleMethod_call returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMethod_callAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethod_callRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)this_RIGHT_PARENTHESIS_1=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_1, grammarAccess.getMethod_callAccess().getRIGHT_PARENTHESISTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethod_callAccess().getParameterParameter_list_method_callParserRuleCall_2_0()); 
	    }
		lv_parameter_2_0=ruleParameter_list_method_call		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethod_callRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"Parameter_list_method_call");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_LEFT_PARENTHESIS_3=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_3, grammarAccess.getMethod_callAccess().getLEFT_PARENTHESISTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleConstructor_declaration
entryRuleConstructor_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructor_declarationRule()); }
	 iv_ruleConstructor_declaration=ruleConstructor_declaration 
	 { $current=$iv_ruleConstructor_declaration.current; } 
	 EOF 
;

// Rule Constructor_declaration
ruleConstructor_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstructor_declarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstructor_declarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)this_RIGHT_PARENTHESIS_2=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_2, grammarAccess.getConstructor_declarationAccess().getRIGHT_PARENTHESISTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getParametersParameter_listParserRuleCall_3_0()); 
	    }
		lv_parameters_3_0=ruleParameter_list		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Parameter_list");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_LEFT_PARENTHESIS_4=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_4, grammarAccess.getConstructor_declarationAccess().getLEFT_PARENTHESISTerminalRuleCall_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructor_declarationAccess().getStatementStatement_blockParserRuleCall_5_0()); 
	    }
		lv_statement_5_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructor_declarationRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_5_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter_list_method_call
entryRuleParameter_list_method_call returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_list_method_callRule()); }
	 iv_ruleParameter_list_method_call=ruleParameter_list_method_call 
	 { $current=$iv_ruleParameter_list_method_call.current; } 
	 EOF 
;

// Rule Parameter_list_method_call
ruleParameter_list_method_call returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameter_list_method_callAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameter_list_method_callRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getParameter_list_method_callAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		lv_parameters_2_0=RULE_ID
		{
			newLeafNode(lv_parameters_2_0, grammarAccess.getParameter_list_method_callAccess().getParametersIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameter_list_method_callRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"ID");
	    }

)
))*)
;





// Entry rule entryRuleParameter_list
entryRuleParameter_list returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameter_listRule()); }
	 iv_ruleParameter_list=ruleParameter_list 
	 { $current=$iv_ruleParameter_list.current; } 
	 EOF 
;

// Rule Parameter_list
ruleParameter_list returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParameterParameterParserRuleCall_0_0()); 
	    }
		lv_parameter_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getParameter_listAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameter_listAccess().getParametersParameterParserRuleCall_1_1_0()); 
	    }
		lv_parameters_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameter_listRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((this_R_ABS_2=RULE_R_ABS
    { 
    newLeafNode(this_R_ABS_2, grammarAccess.getParameterAccess().getR_ABSTerminalRuleCall_2_0_0()); 
    }
this_L_ABS_3=RULE_L_ABS
    { 
    newLeafNode(this_L_ABS_3, grammarAccess.getParameterAccess().getL_ABSTerminalRuleCall_2_0_1()); 
    }
)
    |this_ABS_4=RULE_ABS
    { 
    newLeafNode(this_ABS_4, grammarAccess.getParameterAccess().getABSTerminalRuleCall_2_1()); 
    }
)*)
;





// Entry rule entryRuleVariable_declaration
entryRuleVariable_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declarationRule()); }
	 iv_ruleVariable_declaration=ruleVariable_declaration 
	 { $current=$iv_ruleVariable_declaration.current; } 
	 EOF 
;

// Rule Variable_declaration
ruleVariable_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getModifiersModifierParserRuleCall_0_0()); 
	    }
		lv_modifiers_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getNameVariable_declaratorParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleVariable_declarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Variable_declarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_3=RULE_COMMA
    { 
    newLeafNode(this_COMMA_3, grammarAccess.getVariable_declarationAccess().getCOMMATerminalRuleCall_3_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declarationAccess().getNamesVariable_declaratorParserRuleCall_3_1_0()); 
	    }
		lv_names_4_0=ruleVariable_declarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declarationRule());
	        }
       		add(
       			$current, 
       			"names",
        		lv_names_4_0, 
        		"Variable_declarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_EOL_5=RULE_EOL
    { 
    newLeafNode(this_EOL_5, grammarAccess.getVariable_declarationAccess().getEOLTerminalRuleCall_4()); 
    }
)
;





// Entry rule entryRuleVariable_declarator
entryRuleVariable_declarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_declaratorRule()); }
	 iv_ruleVariable_declarator=ruleVariable_declarator 
	 { $current=$iv_ruleVariable_declarator.current; } 
	 EOF 
;

// Rule Variable_declarator
ruleVariable_declarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariable_declaratorAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariable_declaratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)((this_R_ABS_1=RULE_R_ABS
    { 
    newLeafNode(this_R_ABS_1, grammarAccess.getVariable_declaratorAccess().getR_ABSTerminalRuleCall_1_0_0()); 
    }
this_L_ABS_2=RULE_L_ABS
    { 
    newLeafNode(this_L_ABS_2, grammarAccess.getVariable_declaratorAccess().getL_ABSTerminalRuleCall_1_0_1()); 
    }
)
    |this_ABS_3=RULE_ABS
    { 
    newLeafNode(this_ABS_3, grammarAccess.getVariable_declaratorAccess().getABSTerminalRuleCall_1_1()); 
    }
)*(this_EQUAL_4=RULE_EQUAL
    { 
    newLeafNode(this_EQUAL_4, grammarAccess.getVariable_declaratorAccess().getEQUALTerminalRuleCall_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_declaratorAccess().getInitializerVariable_initializerParserRuleCall_2_1_0()); 
	    }
		lv_initializer_5_0=ruleVariable_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_declaratorRule());
	        }
       		set(
       			$current, 
       			"initializer",
        		lv_initializer_5_0, 
        		"Variable_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariable_initializer
entryRuleVariable_initializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariable_initializerRule()); }
	 iv_ruleVariable_initializer=ruleVariable_initializer 
	 { $current=$iv_ruleVariable_initializer.current; } 
	 EOF 
;

// Rule Variable_initializer
ruleVariable_initializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_initializerAccess().getExpressionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_initializerRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariable_initializerAccess().getVariable_initializerAction_1_0(),
            $current);
    }
)((	RULE_R_CURLY_BRACE)=>this_R_CURLY_BRACE_2=RULE_R_CURLY_BRACE
    { 
    newLeafNode(this_R_CURLY_BRACE_2, grammarAccess.getVariable_initializerAccess().getR_CURLY_BRACETerminalRuleCall_1_1()); 
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_initializerAccess().getVariableInitializer1Variable_initializerParserRuleCall_1_2_0_0()); 
	    }
		lv_variableInitializer1_3_0=ruleVariable_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_initializerRule());
	        }
       		set(
       			$current, 
       			"variableInitializer1",
        		lv_variableInitializer1_3_0, 
        		"Variable_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_4=RULE_COMMA
    { 
    newLeafNode(this_COMMA_4, grammarAccess.getVariable_initializerAccess().getCOMMATerminalRuleCall_1_2_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariable_initializerAccess().getVariableIniatializer2Variable_initializerParserRuleCall_1_2_1_1_0()); 
	    }
		lv_variableIniatializer2_5_0=ruleVariable_initializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariable_initializerRule());
	        }
       		add(
       			$current, 
       			"variableIniatializer2",
        		lv_variableIniatializer2_5_0, 
        		"Variable_initializer");
	        afterParserOrEnumRuleCall();
	    }

)
))*(this_COMMA_6=RULE_COMMA
    { 
    newLeafNode(this_COMMA_6, grammarAccess.getVariable_initializerAccess().getCOMMATerminalRuleCall_1_2_2()); 
    }
)?)?this_L_CURLY_BRACE_7=RULE_L_CURLY_BRACE
    { 
    newLeafNode(this_L_CURLY_BRACE_7, grammarAccess.getVariable_initializerAccess().getL_CURLY_BRACETerminalRuleCall_1_3()); 
    }
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
ruleNumeric_Expression_NR
)
))=>(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getNumericExpression3Numeric_Expression_NRParserRuleCall_0_0_0_0()); 
	    }
		lv_numericExpression3_0_0=ruleNumeric_Expression_NR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"numericExpression3",
        		lv_numericExpression3_0_0, 
        		"Numeric_Expression_NR");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_0_1_0()); 
	    }
		lv_aux_1_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_1_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLogicalExpressionLogical_Expression_NRParserRuleCall_1_0_0()); 
	    }
		lv_logicalExpression_2_0=ruleLogical_Expression_NR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"logicalExpression",
        		lv_logicalExpression_2_0, 
        		"Logical_Expression_NR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_1_1_0()); 
	    }
		lv_aux_3_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_3_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getBitExpressionBit_Expression_NRParserRuleCall_2_0_0()); 
	    }
		lv_bitExpression_4_0=ruleBit_Expression_NR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"bitExpression",
        		lv_bitExpression_4_0, 
        		"Bit_Expression_NR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_2_1_0()); 
	    }
		lv_aux_5_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_5_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((((
(
ruleCast_Expression
)
))=>(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getCastExpressionCast_ExpressionParserRuleCall_3_0_0_0()); 
	    }
		lv_castExpression_6_0=ruleCast_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"castExpression",
        		lv_castExpression_6_0, 
        		"Cast_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_3_1_0()); 
	    }
		lv_aux_7_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_7_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((((
(
ruleCreating_Expression
)
))=>(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getCreatingExpressionCreating_ExpressionParserRuleCall_4_0_0_0()); 
	    }
		lv_creatingExpression_8_0=ruleCreating_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"creatingExpression",
        		lv_creatingExpression_8_0, 
        		"Creating_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_4_1_0()); 
	    }
		lv_aux_9_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_9_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLiteralExpressionLiteral_ExpressionParserRuleCall_5_0_0()); 
	    }
		lv_literalExpression_10_0=ruleLiteral_Expression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"literalExpression",
        		lv_literalExpression_10_0, 
        		"Literal_Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_5_1_0()); 
	    }
		lv_aux_11_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_11_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_null_12_0=RULE_NULL
		{
			newLeafNode(lv_null_12_0, grammarAccess.getExpressionAccess().getNullNULLTerminalRuleCall_6_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"null",
        		lv_null_12_0, 
        		"NULL");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_6_1_0()); 
	    }
		lv_aux_13_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_13_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_super_14_0=RULE_SUPER
		{
			newLeafNode(lv_super_14_0, grammarAccess.getExpressionAccess().getSuperSUPERTerminalRuleCall_7_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"super",
        		lv_super_14_0, 
        		"SUPER");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_7_1_0()); 
	    }
		lv_aux_15_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_15_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_this_16_0=RULE_THIS
		{
			newLeafNode(lv_this_16_0, grammarAccess.getExpressionAccess().getThisTHISTerminalRuleCall_8_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"this",
        		lv_this_16_0, 
        		"THIS");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_8_1_0()); 
	    }
		lv_aux_17_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_17_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_name_18_0=RULE_ID
		{
			newLeafNode(lv_name_18_0, grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_9_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_18_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getAuxExpression_auxParserRuleCall_9_1_0()); 
	    }
		lv_aux_19_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_19_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleExpression_aux
entryRuleExpression_aux returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpression_auxRule()); }
	 iv_ruleExpression_aux=ruleExpression_aux 
	 { $current=$iv_ruleExpression_aux.current; } 
	 EOF 
;

// Rule Expression_aux
ruleExpression_aux returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((this_RIGHT_PARENTHESIS_0=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_0, grammarAccess.getExpression_auxAccess().getRIGHT_PARENTHESISTerminalRuleCall_0_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getArgListArg_ListParserRuleCall_0_0_1_0()); 
	    }
		lv_argList_1_0=ruleArg_List		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		add(
       			$current, 
       			"argList",
        		lv_argList_1_0, 
        		"Arg_List");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_2=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_2, grammarAccess.getExpression_auxAccess().getLEFT_PARENTHESISTerminalRuleCall_0_0_2()); 
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_0_1_0()); 
	    }
		lv_aux_3_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_3_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((this_R_ABS_4=RULE_R_ABS
    { 
    newLeafNode(this_R_ABS_4, grammarAccess.getExpression_auxAccess().getR_ABSTerminalRuleCall_1_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExpression2ExpressionParserRuleCall_1_0_1_0()); 
	    }
		lv_expression2_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_L_ABS_6=RULE_L_ABS
    { 
    newLeafNode(this_L_ABS_6, grammarAccess.getExpression_auxAccess().getL_ABSTerminalRuleCall_1_0_2()); 
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_1_1_0()); 
	    }
		lv_aux_7_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_7_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getExpression_auxAccess().getFullStopKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExpression2ExpressionParserRuleCall_2_0_1_0()); 
	    }
		lv_expression2_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_2_1_0()); 
	    }
		lv_aux_10_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_10_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((this_COMMA_11=RULE_COMMA
    { 
    newLeafNode(this_COMMA_11, grammarAccess.getExpression_auxAccess().getCOMMATerminalRuleCall_3_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExpression2ExpressionParserRuleCall_3_0_1_0()); 
	    }
		lv_expression2_12_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_12_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_3_1_0()); 
	    }
		lv_aux_13_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_13_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((this_INSTANCEOF_14=RULE_INSTANCEOF
    { 
    newLeafNode(this_INSTANCEOF_14, grammarAccess.getExpression_auxAccess().getINSTANCEOFTerminalRuleCall_4_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getNameClass_nameParserRuleCall_4_0_1_0()); 
	    }
		lv_name_15_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_15_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_4_1_0()); 
	    }
		lv_aux_16_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_16_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
(
		lv_sgin_17_1=RULE_INCREMENT
		{
			newLeafNode(lv_sgin_17_1, grammarAccess.getExpression_auxAccess().getSginINCREMENTTerminalRuleCall_5_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sgin",
        		lv_sgin_17_1, 
        		"INCREMENT");
	    }

    |		lv_sgin_17_2=RULE_DECREMENT
		{
			newLeafNode(lv_sgin_17_2, grammarAccess.getExpression_auxAccess().getSginDECREMENTTerminalRuleCall_5_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sgin",
        		lv_sgin_17_2, 
        		"DECREMENT");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_5_1_0()); 
	    }
		lv_aux_18_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_18_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
(
		lv_numericSign_19_1=RULE_PLUS
		{
			newLeafNode(lv_numericSign_19_1, grammarAccess.getExpression_auxAccess().getNumericSignPLUSTerminalRuleCall_6_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_1, 
        		"PLUS");
	    }

    |		lv_numericSign_19_2=RULE_PLUS_EQUAL
		{
			newLeafNode(lv_numericSign_19_2, grammarAccess.getExpression_auxAccess().getNumericSignPLUS_EQUALTerminalRuleCall_6_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_2, 
        		"PLUS_EQUAL");
	    }

    |		lv_numericSign_19_3=RULE_MINUS
		{
			newLeafNode(lv_numericSign_19_3, grammarAccess.getExpression_auxAccess().getNumericSignMINUSTerminalRuleCall_6_0_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_3, 
        		"MINUS");
	    }

    |		lv_numericSign_19_4=RULE_MINUS_EQUAL
		{
			newLeafNode(lv_numericSign_19_4, grammarAccess.getExpression_auxAccess().getNumericSignMINUS_EQUALTerminalRuleCall_6_0_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_4, 
        		"MINUS_EQUAL");
	    }

    |		lv_numericSign_19_5=RULE_MULTIPLY
		{
			newLeafNode(lv_numericSign_19_5, grammarAccess.getExpression_auxAccess().getNumericSignMULTIPLYTerminalRuleCall_6_0_0_4()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_5, 
        		"MULTIPLY");
	    }

    |		lv_numericSign_19_6=RULE_MULTIPLY_EQUAL
		{
			newLeafNode(lv_numericSign_19_6, grammarAccess.getExpression_auxAccess().getNumericSignMULTIPLY_EQUALTerminalRuleCall_6_0_0_5()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_6, 
        		"MULTIPLY_EQUAL");
	    }

    |		lv_numericSign_19_7=RULE_DIVIDE
		{
			newLeafNode(lv_numericSign_19_7, grammarAccess.getExpression_auxAccess().getNumericSignDIVIDETerminalRuleCall_6_0_0_6()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_7, 
        		"DIVIDE");
	    }

    |		lv_numericSign_19_8=RULE_DIVIDE_EQUAL
		{
			newLeafNode(lv_numericSign_19_8, grammarAccess.getExpression_auxAccess().getNumericSignDIVIDE_EQUALTerminalRuleCall_6_0_0_7()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_8, 
        		"DIVIDE_EQUAL");
	    }

    |		lv_numericSign_19_9=RULE_MODULE
		{
			newLeafNode(lv_numericSign_19_9, grammarAccess.getExpression_auxAccess().getNumericSignMODULETerminalRuleCall_6_0_0_8()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_9, 
        		"MODULE");
	    }

    |		lv_numericSign_19_10=RULE_MODULE_EQUAL
		{
			newLeafNode(lv_numericSign_19_10, grammarAccess.getExpression_auxAccess().getNumericSignMODULE_EQUALTerminalRuleCall_6_0_0_9()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"numericSign",
        		lv_numericSign_19_10, 
        		"MODULE_EQUAL");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExp2ExpressionParserRuleCall_6_1_0()); 
	    }
		lv_exp2_20_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"exp2",
        		lv_exp2_20_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_6_2_0()); 
	    }
		lv_aux_21_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_21_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
(
		lv_testingSign_22_1=RULE_BT
		{
			newLeafNode(lv_testingSign_22_1, grammarAccess.getExpression_auxAccess().getTestingSignBTTerminalRuleCall_7_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"testingSign",
        		lv_testingSign_22_1, 
        		"BT");
	    }

    |		lv_testingSign_22_2=RULE_ST
		{
			newLeafNode(lv_testingSign_22_2, grammarAccess.getExpression_auxAccess().getTestingSignSTTerminalRuleCall_7_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"testingSign",
        		lv_testingSign_22_2, 
        		"ST");
	    }

    |		lv_testingSign_22_3=RULE_BE
		{
			newLeafNode(lv_testingSign_22_3, grammarAccess.getExpression_auxAccess().getTestingSignBETerminalRuleCall_7_0_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"testingSign",
        		lv_testingSign_22_3, 
        		"BE");
	    }

    |		lv_testingSign_22_4=RULE_SE
		{
			newLeafNode(lv_testingSign_22_4, grammarAccess.getExpression_auxAccess().getTestingSignSETerminalRuleCall_7_0_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"testingSign",
        		lv_testingSign_22_4, 
        		"SE");
	    }

    |		lv_testingSign_22_5=RULE_DOUBLE_EQUAL
		{
			newLeafNode(lv_testingSign_22_5, grammarAccess.getExpression_auxAccess().getTestingSignDOUBLE_EQUALTerminalRuleCall_7_0_0_4()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"testingSign",
        		lv_testingSign_22_5, 
        		"DOUBLE_EQUAL");
	    }

    |		lv_testingSign_22_6=RULE_DIFFERENT
		{
			newLeafNode(lv_testingSign_22_6, grammarAccess.getExpression_auxAccess().getTestingSignDIFFERENTTerminalRuleCall_7_0_0_5()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"testingSign",
        		lv_testingSign_22_6, 
        		"DIFFERENT");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExp1ExpressionParserRuleCall_7_1_0()); 
	    }
		lv_exp1_23_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_23_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_7_2_0()); 
	    }
		lv_aux_24_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_24_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((
(
(
		lv_logicalSign_25_1=RULE_OR
		{
			newLeafNode(lv_logicalSign_25_1, grammarAccess.getExpression_auxAccess().getLogicalSignORTerminalRuleCall_8_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"logicalSign",
        		lv_logicalSign_25_1, 
        		"OR");
	    }

    |		lv_logicalSign_25_2=RULE_OR_EQUAL
		{
			newLeafNode(lv_logicalSign_25_2, grammarAccess.getExpression_auxAccess().getLogicalSignOR_EQUALTerminalRuleCall_8_0_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"logicalSign",
        		lv_logicalSign_25_2, 
        		"OR_EQUAL");
	    }

    |		lv_logicalSign_25_3=RULE_EXP
		{
			newLeafNode(lv_logicalSign_25_3, grammarAccess.getExpression_auxAccess().getLogicalSignEXPTerminalRuleCall_8_0_0_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"logicalSign",
        		lv_logicalSign_25_3, 
        		"EXP");
	    }

    |		lv_logicalSign_25_4=RULE_EXP_EQUAL
		{
			newLeafNode(lv_logicalSign_25_4, grammarAccess.getExpression_auxAccess().getLogicalSignEXP_EQUALTerminalRuleCall_8_0_0_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"logicalSign",
        		lv_logicalSign_25_4, 
        		"EXP_EQUAL");
	    }

    |		lv_logicalSign_25_5=RULE_DOUBLE_OR_EQUAL
		{
			newLeafNode(lv_logicalSign_25_5, grammarAccess.getExpression_auxAccess().getLogicalSignDOUBLE_OR_EQUALTerminalRuleCall_8_0_0_0_4()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"logicalSign",
        		lv_logicalSign_25_5, 
        		"DOUBLE_OR_EQUAL");
	    }

    |		lv_logicalSign_25_6=RULE_MODULE
		{
			newLeafNode(lv_logicalSign_25_6, grammarAccess.getExpression_auxAccess().getLogicalSignMODULETerminalRuleCall_8_0_0_0_5()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"logicalSign",
        		lv_logicalSign_25_6, 
        		"MODULE");
	    }

    |		lv_logicalSign_25_7=RULE_MODULE_EQUAL
		{
			newLeafNode(lv_logicalSign_25_7, grammarAccess.getExpression_auxAccess().getLogicalSignMODULE_EQUALTerminalRuleCall_8_0_0_0_6()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"logicalSign",
        		lv_logicalSign_25_7, 
        		"MODULE_EQUAL");
	    }

)

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAmpersandAmpersand_RuleParserRuleCall_8_0_1_0()); 
	    }
		lv_ampersand_26_0=ruleAmpersand_Rule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"ampersand",
        		lv_ampersand_26_0, 
        		"Ampersand_Rule");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExp1ExpressionParserRuleCall_8_1_0()); 
	    }
		lv_exp1_27_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_27_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_8_2_0()); 
	    }
		lv_aux_28_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_28_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(this_WAT_29=RULE_WAT
    { 
    newLeafNode(this_WAT_29, grammarAccess.getExpression_auxAccess().getWATTerminalRuleCall_9_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExp1ExpressionParserRuleCall_9_1_0()); 
	    }
		lv_exp1_30_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_30_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_COLON_31=RULE_COLON
    { 
    newLeafNode(this_COLON_31, grammarAccess.getExpression_auxAccess().getCOLONTerminalRuleCall_9_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExp2ExpressionParserRuleCall_9_3_0()); 
	    }
		lv_exp2_32_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"exp2",
        		lv_exp2_32_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_9_4_0()); 
	    }
		lv_aux_33_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_33_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
(
		lv_stringSign_34_1=RULE_PLUS
		{
			newLeafNode(lv_stringSign_34_1, grammarAccess.getExpression_auxAccess().getStringSignPLUSTerminalRuleCall_10_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringSign",
        		lv_stringSign_34_1, 
        		"PLUS");
	    }

    |		lv_stringSign_34_2=RULE_PLUS_EQUAL
		{
			newLeafNode(lv_stringSign_34_2, grammarAccess.getExpression_auxAccess().getStringSignPLUS_EQUALTerminalRuleCall_10_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"stringSign",
        		lv_stringSign_34_2, 
        		"PLUS_EQUAL");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExp1ExpressionParserRuleCall_10_1_0()); 
	    }
		lv_exp1_35_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"exp1",
        		lv_exp1_35_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_10_2_0()); 
	    }
		lv_aux_36_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_36_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
(
		lv_bitSign_37_1=RULE_R_SHIFT_EQUAL
		{
			newLeafNode(lv_bitSign_37_1, grammarAccess.getExpression_auxAccess().getBitSignR_SHIFT_EQUALTerminalRuleCall_11_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bitSign",
        		lv_bitSign_37_1, 
        		"R_SHIFT_EQUAL");
	    }

    |		lv_bitSign_37_2=RULE_L_SHIFT
		{
			newLeafNode(lv_bitSign_37_2, grammarAccess.getExpression_auxAccess().getBitSignL_SHIFTTerminalRuleCall_11_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bitSign",
        		lv_bitSign_37_2, 
        		"L_SHIFT");
	    }

    |		lv_bitSign_37_3=RULE_R_SHIFT
		{
			newLeafNode(lv_bitSign_37_3, grammarAccess.getExpression_auxAccess().getBitSignR_SHIFTTerminalRuleCall_11_0_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bitSign",
        		lv_bitSign_37_3, 
        		"R_SHIFT");
	    }

    |		lv_bitSign_37_4=RULE_SUPER_SHIFT
		{
			newLeafNode(lv_bitSign_37_4, grammarAccess.getExpression_auxAccess().getBitSignSUPER_SHIFTTerminalRuleCall_11_0_0_3()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpression_auxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bitSign",
        		lv_bitSign_37_4, 
        		"SUPER_SHIFT");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getExpressionBitExpressionParserRuleCall_11_1_0()); 
	    }
		lv_expressionBit_38_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"expressionBit",
        		lv_expressionBit_38_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpression_auxAccess().getAuxExpression_auxParserRuleCall_11_2_0()); 
	    }
		lv_aux_39_0=ruleExpression_aux		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpression_auxRule());
	        }
       		set(
       			$current, 
       			"aux",
        		lv_aux_39_0, 
        		"Expression_aux");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpression_auxAccess().getExpression_auxAction_12(),
            $current);
    }
))
;





// Entry rule entryRuleAmpersand_Rule
entryRuleAmpersand_Rule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAmpersand_RuleRule()); }
	 iv_ruleAmpersand_Rule=ruleAmpersand_Rule 
	 { $current=$iv_ruleAmpersand_Rule.current; } 
	 EOF 
;

// Rule Ampersand_Rule
ruleAmpersand_Rule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_a1_0_0=RULE_AMPERSAND
		{
			newLeafNode(lv_a1_0_0, grammarAccess.getAmpersand_RuleAccess().getA1AMPERSANDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAmpersand_RuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"AMPERSAND");
	    }

)
)((
(
		lv_a2_1_0=RULE_AMPERSAND
		{
			newLeafNode(lv_a2_1_0, grammarAccess.getAmpersand_RuleAccess().getA2AMPERSANDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAmpersand_RuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"a2",
        		lv_a2_1_0, 
        		"AMPERSAND");
	    }

)
)
    |this_EQUAL_2=RULE_EQUAL
    { 
    newLeafNode(this_EQUAL_2, grammarAccess.getAmpersand_RuleAccess().getEQUALTerminalRuleCall_1_1()); 
    }
)?)
;





// Entry rule entryRuleFloat_Literal
entryRuleFloat_Literal returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloat_LiteralRule()); }
	 iv_ruleFloat_Literal=ruleFloat_Literal 
	 { $current=$iv_ruleFloat_Literal.current; } 
	 EOF 
;

// Rule Float_Literal
ruleFloat_Literal returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_decimalDigits1_0_0=RULE_DECIMAL_DIGITS
		{
			newLeafNode(lv_decimalDigits1_0_0, grammarAccess.getFloat_LiteralAccess().getDecimalDigits1DECIMAL_DIGITSTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloat_LiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decimalDigits1",
        		lv_decimalDigits1_0_0, 
        		"DECIMAL_DIGITS");
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFloat_LiteralAccess().getFullStopKeyword_1());
    }
(
(
		lv_decimalDigits2_2_0=RULE_DECIMAL_DIGITS
		{
			newLeafNode(lv_decimalDigits2_2_0, grammarAccess.getFloat_LiteralAccess().getDecimalDigits2DECIMAL_DIGITSTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloat_LiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"decimalDigits2",
        		lv_decimalDigits2_2_0, 
        		"DECIMAL_DIGITS");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFloat_LiteralAccess().getExpEXPOENT_PARTParserRuleCall_3_0()); 
	    }
		lv_exp_3_0=ruleEXPOENT_PART		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloat_LiteralRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_3_0, 
        		"EXPOENT_PART");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_floatTypeSufix_4_0=RULE_FLOAT_TYPE_SUFIX
		{
			newLeafNode(lv_floatTypeSufix_4_0, grammarAccess.getFloat_LiteralAccess().getFloatTypeSufixFLOAT_TYPE_SUFIXTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloat_LiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"floatTypeSufix",
        		lv_floatTypeSufix_4_0, 
        		"FLOAT_TYPE_SUFIX");
	    }

)
)?)
;





// Entry rule entryRuleLiteral_Expression
entryRuleLiteral_Expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteral_ExpressionRule()); }
	 iv_ruleLiteral_Expression=ruleLiteral_Expression 
	 { $current=$iv_ruleLiteral_Expression.current; } 
	 EOF 
;

// Rule Literal_Expression
ruleLiteral_Expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		lv_exp_0_0=RULE_HEXA
		{
			newLeafNode(lv_exp_0_0, grammarAccess.getLiteral_ExpressionAccess().getExpHEXATerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteral_ExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"exp",
        		lv_exp_0_0, 
        		"HEXA");
	    }

)
)(this_LONG_1=RULE_LONG
    { 
    newLeafNode(this_LONG_1, grammarAccess.getLiteral_ExpressionAccess().getLONGTerminalRuleCall_0_0_1()); 
    }
)?)
    |((
(
		lv_exp1_2_0=RULE_DECIMAL_DIGITS
		{
			newLeafNode(lv_exp1_2_0, grammarAccess.getLiteral_ExpressionAccess().getExp1DECIMAL_DIGITSTerminalRuleCall_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteral_ExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"exp1",
        		lv_exp1_2_0, 
        		"DECIMAL_DIGITS");
	    }

)
)(this_LONG_3=RULE_LONG
    { 
    newLeafNode(this_LONG_3, grammarAccess.getLiteral_ExpressionAccess().getLONGTerminalRuleCall_0_1_1()); 
    }
)?))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteral_ExpressionAccess().getExp2Float_LiteralParserRuleCall_1_0()); 
	    }
		lv_exp2_4_0=ruleFloat_Literal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteral_ExpressionRule());
	        }
       		set(
       			$current, 
       			"exp2",
        		lv_exp2_4_0, 
        		"Float_Literal");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_string_5_0=RULE_STRING
		{
			newLeafNode(lv_string_5_0, grammarAccess.getLiteral_ExpressionAccess().getStringSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteral_ExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_5_0, 
        		"STRING");
	    }

)
)
    |(
(
		lv_char_6_0=RULE_CHAR
		{
			newLeafNode(lv_char_6_0, grammarAccess.getLiteral_ExpressionAccess().getCharCHARTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteral_ExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"char",
        		lv_char_6_0, 
        		"CHAR");
	    }

)
))
;





// Entry rule entryRuleCreating_Expression
entryRuleCreating_Expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreating_ExpressionRule()); }
	 iv_ruleCreating_Expression=ruleCreating_Expression 
	 { $current=$iv_ruleCreating_Expression.current; } 
	 EOF 
;

// Rule Creating_Expression
ruleCreating_Expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_NEW_0=RULE_NEW
    { 
    newLeafNode(this_NEW_0, grammarAccess.getCreating_ExpressionAccess().getNEWTerminalRuleCall_0()); 
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getCreating_ExpressionAccess().getClassNameClass_nameParserRuleCall_1_0_0_0()); 
	    }
		lv_className_1_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreating_ExpressionRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_1_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
)this_RIGHT_PARENTHESIS_2=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_2, grammarAccess.getCreating_ExpressionAccess().getRIGHT_PARENTHESISTerminalRuleCall_1_0_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreating_ExpressionAccess().getArgListArg_ListParserRuleCall_1_0_2_0()); 
	    }
		lv_argList_3_0=ruleArg_List		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreating_ExpressionRule());
	        }
       		set(
       			$current, 
       			"argList",
        		lv_argList_3_0, 
        		"Arg_List");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_4=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_4, grammarAccess.getCreating_ExpressionAccess().getLEFT_PARENTHESISTerminalRuleCall_1_0_3()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getCreating_ExpressionAccess().getTypeSpecifierType_specifierParserRuleCall_1_1_0_0()); 
	    }
		lv_typeSpecifier_5_0=ruleType_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreating_ExpressionRule());
	        }
       		set(
       			$current, 
       			"typeSpecifier",
        		lv_typeSpecifier_5_0, 
        		"Type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_R_ABS_6=RULE_R_ABS
    { 
    newLeafNode(this_R_ABS_6, grammarAccess.getCreating_ExpressionAccess().getR_ABSTerminalRuleCall_1_1_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreating_ExpressionAccess().getExpressionExpressionParserRuleCall_1_1_1_1_0()); 
	    }
		lv_expression_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreating_ExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_L_ABS_8=RULE_L_ABS
    { 
    newLeafNode(this_L_ABS_8, grammarAccess.getCreating_ExpressionAccess().getL_ABSTerminalRuleCall_1_1_1_2()); 
    }
)?((this_R_ABS_9=RULE_R_ABS
    { 
    newLeafNode(this_R_ABS_9, grammarAccess.getCreating_ExpressionAccess().getR_ABSTerminalRuleCall_1_1_2_0_0()); 
    }
this_L_ABS_10=RULE_L_ABS
    { 
    newLeafNode(this_L_ABS_10, grammarAccess.getCreating_ExpressionAccess().getL_ABSTerminalRuleCall_1_1_2_0_1()); 
    }
)
    |this_ABS_11=RULE_ABS
    { 
    newLeafNode(this_ABS_11, grammarAccess.getCreating_ExpressionAccess().getABSTerminalRuleCall_1_1_2_1()); 
    }
)*)
    |(this_RIGHT_PARENTHESIS_12=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_12, grammarAccess.getCreating_ExpressionAccess().getRIGHT_PARENTHESISTerminalRuleCall_1_2_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreating_ExpressionAccess().getExpressionExpressionParserRuleCall_1_2_1_0()); 
	    }
		lv_expression_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreating_ExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_13_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_14=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_14, grammarAccess.getCreating_ExpressionAccess().getLEFT_PARENTHESISTerminalRuleCall_1_2_2()); 
    }
)))
;





// Entry rule entryRuleCast_Expression
entryRuleCast_Expression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCast_ExpressionRule()); }
	 iv_ruleCast_Expression=ruleCast_Expression 
	 { $current=$iv_ruleCast_Expression.current; } 
	 EOF 
;

// Rule Cast_Expression
ruleCast_Expression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_RIGHT_PARENTHESIS_0=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_0, grammarAccess.getCast_ExpressionAccess().getRIGHT_PARENTHESISTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCast_ExpressionAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCast_ExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_2=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_2, grammarAccess.getCast_ExpressionAccess().getLEFT_PARENTHESISTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCast_ExpressionAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCast_ExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBit_Expression_NR
entryRuleBit_Expression_NR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBit_Expression_NRRule()); }
	 iv_ruleBit_Expression_NR=ruleBit_Expression_NR 
	 { $current=$iv_ruleBit_Expression_NR.current; } 
	 EOF 
;

// Rule Bit_Expression_NR
ruleBit_Expression_NR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_NOT_0=RULE_NOT
    { 
    newLeafNode(this_NOT_0, grammarAccess.getBit_Expression_NRAccess().getNOTTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBit_Expression_NRAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBit_Expression_NRRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLogical_Expression_NR
entryRuleLogical_Expression_NR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogical_Expression_NRRule()); }
	 iv_ruleLogical_Expression_NR=ruleLogical_Expression_NR 
	 { $current=$iv_ruleLogical_Expression_NR.current; } 
	 EOF 
;

// Rule Logical_Expression_NR
ruleLogical_Expression_NR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((this_EXCLAMATION_0=RULE_EXCLAMATION
    { 
    newLeafNode(this_EXCLAMATION_0, grammarAccess.getLogical_Expression_NRAccess().getEXCLAMATIONTerminalRuleCall_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogical_Expression_NRAccess().getExpressionExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogical_Expression_NRRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_true_2_0=RULE_TRUE
		{
			newLeafNode(lv_true_2_0, grammarAccess.getLogical_Expression_NRAccess().getTrueTRUETerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogical_Expression_NRRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"true",
        		lv_true_2_0, 
        		"TRUE");
	    }

)
)
    |(
(
		lv_false_3_0=RULE_FALSE
		{
			newLeafNode(lv_false_3_0, grammarAccess.getLogical_Expression_NRAccess().getFalseFALSETerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLogical_Expression_NRRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"false",
        		lv_false_3_0, 
        		"FALSE");
	    }

)
))
;





// Entry rule entryRuleArg_List
entryRuleArg_List returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArg_ListRule()); }
	 iv_ruleArg_List=ruleArg_List 
	 { $current=$iv_ruleArg_List.current; } 
	 EOF 
;

// Rule Arg_List
ruleArg_List returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArg_ListAccess().getExpressionExpressionParserRuleCall_0_0()); 
	    }
		lv_expression_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArg_ListRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_COMMA_1=RULE_COMMA
    { 
    newLeafNode(this_COMMA_1, grammarAccess.getArg_ListAccess().getCOMMATerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArg_ListAccess().getExpressionsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expressions_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArg_ListRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleNumeric_Expression_NR
entryRuleNumeric_Expression_NR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumeric_Expression_NRRule()); }
	 iv_ruleNumeric_Expression_NR=ruleNumeric_Expression_NR 
	 { $current=$iv_ruleNumeric_Expression_NR.current; } 
	 EOF 
;

// Rule Numeric_Expression_NR
ruleNumeric_Expression_NR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_sinal_numeric_0_1=RULE_MINUS
		{
			newLeafNode(lv_sinal_numeric_0_1, grammarAccess.getNumeric_Expression_NRAccess().getSinal_numericMINUSTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumeric_Expression_NRRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sinal_numeric",
        		lv_sinal_numeric_0_1, 
        		"MINUS");
	    }

    |		lv_sinal_numeric_0_2=RULE_INCREMENT
		{
			newLeafNode(lv_sinal_numeric_0_2, grammarAccess.getNumeric_Expression_NRAccess().getSinal_numericINCREMENTTerminalRuleCall_0_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumeric_Expression_NRRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sinal_numeric",
        		lv_sinal_numeric_0_2, 
        		"INCREMENT");
	    }

    |		lv_sinal_numeric_0_3=RULE_DECREMENT
		{
			newLeafNode(lv_sinal_numeric_0_3, grammarAccess.getNumeric_Expression_NRAccess().getSinal_numericDECREMENTTerminalRuleCall_0_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNumeric_Expression_NRRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"sinal_numeric",
        		lv_sinal_numeric_0_3, 
        		"DECREMENT");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumeric_Expression_NRAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumeric_Expression_NRRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getNameType_specifierParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleType_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"Type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
)((this_R_ABS_1=RULE_R_ABS
    { 
    newLeafNode(this_R_ABS_1, grammarAccess.getTypeAccess().getR_ABSTerminalRuleCall_1_0_0()); 
    }
this_L_ABS_2=RULE_L_ABS
    { 
    newLeafNode(this_L_ABS_2, grammarAccess.getTypeAccess().getL_ABSTerminalRuleCall_1_0_1()); 
    }
)
    |this_ABS_3=RULE_ABS
    { 
    newLeafNode(this_ABS_3, grammarAccess.getTypeAccess().getABSTerminalRuleCall_1_1()); 
    }
)*)
;





// Entry rule entryRuleType_specifier
entryRuleType_specifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getType_specifierRule()); } 
	 iv_ruleType_specifier=ruleType_specifier 
	 { $current=$iv_ruleType_specifier.current.getText(); }  
	 EOF 
;

// Rule Type_specifier
ruleType_specifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getBooleanKeyword_0()); 
    }

    |
	kw='byte' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getByteKeyword_1()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getCharKeyword_2()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getShortKeyword_3()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getIntKeyword_4()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getFloatKeyword_5()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getLongKeyword_6()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getDoubleKeyword_7()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getType_specifierAccess().getVoidKeyword_8()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getType_specifierAccess().getClass_nameParserRuleCall_9()); 
    }
    this_Class_name_9=ruleClass_name    {
		$current.merge(this_Class_name_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_MOD_0=RULE_MOD    {
		$current.merge(this_MOD_0);
    }

    { 
    newLeafNode(this_MOD_0, grammarAccess.getModifierAccess().getMODTerminalRuleCall_0()); 
    }

    |    this_STATIC_1=RULE_STATIC    {
		$current.merge(this_STATIC_1);
    }

    { 
    newLeafNode(this_STATIC_1, grammarAccess.getModifierAccess().getSTATICTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleStatic_initializer
entryRuleStatic_initializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatic_initializerRule()); }
	 iv_ruleStatic_initializer=ruleStatic_initializer 
	 { $current=$iv_ruleStatic_initializer.current; } 
	 EOF 
;

// Rule Static_initializer
ruleStatic_initializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_static_0_0=RULE_STATIC
		{
			newLeafNode(lv_static_0_0, grammarAccess.getStatic_initializerAccess().getStaticSTATICTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatic_initializerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"static",
        		lv_static_0_0, 
        		"STATIC");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatic_initializerAccess().getNameStatement_blockParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleStatement_block		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatic_initializerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Statement_block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement_block
entryRuleStatement_block returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatement_blockRule()); }
	 iv_ruleStatement_block=ruleStatement_block 
	 { $current=$iv_ruleStatement_block.current; } 
	 EOF 
;

// Rule Statement_block
ruleStatement_block returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatement_blockAccess().getStatement_blockAction_0(),
            $current);
    }
)this_R_CURLY_BRACE_1=RULE_R_CURLY_BRACE
    { 
    newLeafNode(this_R_CURLY_BRACE_1, grammarAccess.getStatement_blockAccess().getR_CURLY_BRACETerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatement_blockAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatement_blockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*this_L_CURLY_BRACE_3=RULE_L_CURLY_BRACE
    { 
    newLeafNode(this_L_CURLY_BRACE_3, grammarAccess.getStatement_blockAccess().getL_CURLY_BRACETerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getReturn_StatementAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getReturnSmtReturn_StatementParserRuleCall_0_1_0()); 
	    }
		lv_returnSmt_1_0=ruleReturn_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"returnSmt",
        		lv_returnSmt_1_0, 
        		"Return_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getVariableVariable_declarationParserRuleCall_1_0()); 
	    }
		lv_variable_2_0=ruleVariable_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"Variable_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getExpressionxExpressionParserRuleCall_2_0()); 
	    }
		lv_expressionx_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"expressionx",
        		lv_expressionx_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementIf_StatementParserRuleCall_3_0()); 
	    }
		lv_ifStatement_4_0=ruleIf_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"ifStatement",
        		lv_ifStatement_4_0, 
        		"If_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getDoStatementDo_StatementParserRuleCall_4_0()); 
	    }
		lv_doStatement_5_0=ruleDo_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"doStatement",
        		lv_doStatement_5_0, 
        		"Do_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementWhile_StatementParserRuleCall_5_0()); 
	    }
		lv_whileStatement_6_0=ruleWhile_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"whileStatement",
        		lv_whileStatement_6_0, 
        		"While_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getForStatementFor_StatementParserRuleCall_6_0()); 
	    }
		lv_forStatement_7_0=ruleFor_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"forStatement",
        		lv_forStatement_7_0, 
        		"For_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSwitchStatementSwitch_StatementParserRuleCall_7_0()); 
	    }
		lv_switchStatement_8_0=ruleSwitch_Statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"switchStatement",
        		lv_switchStatement_8_0, 
        		"Switch_Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStatement_blockParserRuleCall_8()); 
    }
    this_Statement_block_9=ruleStatement_block
    { 
        $current = $this_Statement_block_9.current; 
        afterParserOrEnumRuleCall();
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getTryTry_statementParserRuleCall_9_0()); 
	    }
		lv_try_10_0=ruleTry_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"try",
        		lv_try_10_0, 
        		"Try_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		lv_name_11_0=RULE_ID
		{
			newLeafNode(lv_name_11_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_10_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_11_0, 
        		"ID");
	    }

)
)this_COLON_12=RULE_COLON
    { 
    newLeafNode(this_COLON_12, grammarAccess.getStatementAccess().getCOLONTerminalRuleCall_10_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getStatementStatementParserRuleCall_10_2_0()); 
	    }
		lv_statement_13_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_13_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_11_0(),
            $current);
    }
)	otherlv_15='break' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getStatementAccess().getBreakKeyword_11_1());
    }
(
(
		lv_name_16_0=RULE_ID
		{
			newLeafNode(lv_name_16_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_11_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_16_0, 
        		"ID");
	    }

)
)?this_EOL_17=RULE_EOL
    { 
    newLeafNode(this_EOL_17, grammarAccess.getStatementAccess().getEOLTerminalRuleCall_11_3()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_12_0(),
            $current);
    }
)	otherlv_19='continue' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStatementAccess().getContinueKeyword_12_1());
    }
(
(
		lv_name_20_0=RULE_ID
		{
			newLeafNode(lv_name_20_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_12_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_20_0, 
        		"ID");
	    }

)
)?this_EOL_21=RULE_EOL
    { 
    newLeafNode(this_EOL_21, grammarAccess.getStatementAccess().getEOLTerminalRuleCall_12_3()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_13_0(),
            $current);
    }
)this_EOL_23=RULE_EOL
    { 
    newLeafNode(this_EOL_23, grammarAccess.getStatementAccess().getEOLTerminalRuleCall_13_1()); 
    }
))
;





// Entry rule entryRuleSwitch_Statement
entryRuleSwitch_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitch_StatementRule()); }
	 iv_ruleSwitch_Statement=ruleSwitch_Statement 
	 { $current=$iv_ruleSwitch_Statement.current; } 
	 EOF 
;

// Rule Switch_Statement
ruleSwitch_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSwitch_StatementAccess().getSwitch_StatementAction_0(),
            $current);
    }
)this_SWITCH_1=RULE_SWITCH
    { 
    newLeafNode(this_SWITCH_1, grammarAccess.getSwitch_StatementAccess().getSWITCHTerminalRuleCall_1()); 
    }
this_RIGHT_PARENTHESIS_2=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_2, grammarAccess.getSwitch_StatementAccess().getRIGHT_PARENTHESISTerminalRuleCall_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_StatementAccess().getExpressionExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_StatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_4=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_4, grammarAccess.getSwitch_StatementAccess().getLEFT_PARENTHESISTerminalRuleCall_4()); 
    }
this_R_CURLY_BRACE_5=RULE_R_CURLY_BRACE
    { 
    newLeafNode(this_R_CURLY_BRACE_5, grammarAccess.getSwitch_StatementAccess().getR_CURLY_BRACETerminalRuleCall_5()); 
    }
((this_CASE_6=RULE_CASE
    { 
    newLeafNode(this_CASE_6, grammarAccess.getSwitch_StatementAccess().getCASETerminalRuleCall_6_0_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_StatementAccess().getExpressionsExpressionParserRuleCall_6_0_1_0()); 
	    }
		lv_expressions_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_StatementRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_COLON_8=RULE_COLON
    { 
    newLeafNode(this_COLON_8, grammarAccess.getSwitch_StatementAccess().getCOLONTerminalRuleCall_6_0_2()); 
    }
)
    |(this_DEFAULT_9=RULE_DEFAULT
    { 
    newLeafNode(this_DEFAULT_9, grammarAccess.getSwitch_StatementAccess().getDEFAULTTerminalRuleCall_6_1_0()); 
    }
this_COLON_10=RULE_COLON
    { 
    newLeafNode(this_COLON_10, grammarAccess.getSwitch_StatementAccess().getCOLONTerminalRuleCall_6_1_1()); 
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitch_StatementAccess().getStatementsStatementParserRuleCall_6_2_0()); 
	    }
		lv_statements_11_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitch_StatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_11_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*this_L_CURLY_BRACE_12=RULE_L_CURLY_BRACE
    { 
    newLeafNode(this_L_CURLY_BRACE_12, grammarAccess.getSwitch_StatementAccess().getL_CURLY_BRACETerminalRuleCall_7()); 
    }
)
;





// Entry rule entryRuleFor_Statement
entryRuleFor_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_StatementRule()); }
	 iv_ruleFor_Statement=ruleFor_Statement 
	 { $current=$iv_ruleFor_Statement.current; } 
	 EOF 
;

// Rule For_Statement
ruleFor_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_FOR_0=RULE_FOR
    { 
    newLeafNode(this_FOR_0, grammarAccess.getFor_StatementAccess().getFORTerminalRuleCall_0()); 
    }
this_RIGHT_PARENTHESIS_1=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_1, grammarAccess.getFor_StatementAccess().getRIGHT_PARENTHESISTerminalRuleCall_1()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFor_StatementAccess().getVariableVariable_declarationParserRuleCall_2_0_0()); 
	    }
		lv_variable_2_0=ruleVariable_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_StatementRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_2_0, 
        		"Variable_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_pv_3_0=RULE_EOL
		{
			newLeafNode(lv_pv_3_0, grammarAccess.getFor_StatementAccess().getPvEOLTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFor_StatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"pv",
        		lv_pv_3_0, 
        		"EOL");
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFor_StatementAccess().getExpressionExpressionParserRuleCall_2_2_0_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_StatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_5=RULE_EOL
    { 
    newLeafNode(this_EOL_5, grammarAccess.getFor_StatementAccess().getEOLTerminalRuleCall_2_2_1()); 
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_StatementAccess().getExpression2ExpressionParserRuleCall_3_0()); 
	    }
		lv_expression2_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_StatementRule());
	        }
       		set(
       			$current, 
       			"expression2",
        		lv_expression2_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_EOL_7=RULE_EOL
    { 
    newLeafNode(this_EOL_7, grammarAccess.getFor_StatementAccess().getEOLTerminalRuleCall_4()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_StatementAccess().getExpression3ExpressionParserRuleCall_5_0()); 
	    }
		lv_expression3_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_StatementRule());
	        }
       		set(
       			$current, 
       			"expression3",
        		lv_expression3_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_EOL_9=RULE_EOL
    { 
    newLeafNode(this_EOL_9, grammarAccess.getFor_StatementAccess().getEOLTerminalRuleCall_6()); 
    }
this_LEFT_PARENTHESIS_10=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_10, grammarAccess.getFor_StatementAccess().getLEFT_PARENTHESISTerminalRuleCall_7()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_StatementAccess().getStatementStatementParserRuleCall_8_0()); 
	    }
		lv_statement_11_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_StatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_11_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleWhile_Statement
entryRuleWhile_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhile_StatementRule()); }
	 iv_ruleWhile_Statement=ruleWhile_Statement 
	 { $current=$iv_ruleWhile_Statement.current; } 
	 EOF 
;

// Rule While_Statement
ruleWhile_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_WHILE_0=RULE_WHILE
    { 
    newLeafNode(this_WHILE_0, grammarAccess.getWhile_StatementAccess().getWHILETerminalRuleCall_0()); 
    }
this_RIGHT_PARENTHESIS_1=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_1, grammarAccess.getWhile_StatementAccess().getRIGHT_PARENTHESISTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_StatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_StatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_3=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_3, grammarAccess.getWhile_StatementAccess().getLEFT_PARENTHESISTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_StatementAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_StatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDo_Statement
entryRuleDo_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDo_StatementRule()); }
	 iv_ruleDo_Statement=ruleDo_Statement 
	 { $current=$iv_ruleDo_Statement.current; } 
	 EOF 
;

// Rule Do_Statement
ruleDo_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_DO_0=RULE_DO
    { 
    newLeafNode(this_DO_0, grammarAccess.getDo_StatementAccess().getDOTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDo_StatementAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDo_StatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)this_WHILE_2=RULE_WHILE
    { 
    newLeafNode(this_WHILE_2, grammarAccess.getDo_StatementAccess().getWHILETerminalRuleCall_2()); 
    }
this_RIGHT_PARENTHESIS_3=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_3, grammarAccess.getDo_StatementAccess().getRIGHT_PARENTHESISTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDo_StatementAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDo_StatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_5=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_5, grammarAccess.getDo_StatementAccess().getLEFT_PARENTHESISTerminalRuleCall_5()); 
    }
this_EOL_6=RULE_EOL
    { 
    newLeafNode(this_EOL_6, grammarAccess.getDo_StatementAccess().getEOLTerminalRuleCall_6()); 
    }
)
;





// Entry rule entryRuleIf_Statement
entryRuleIf_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_StatementRule()); }
	 iv_ruleIf_Statement=ruleIf_Statement 
	 { $current=$iv_ruleIf_Statement.current; } 
	 EOF 
;

// Rule If_Statement
ruleIf_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_IF_0=RULE_IF
    { 
    newLeafNode(this_IF_0, grammarAccess.getIf_StatementAccess().getIFTerminalRuleCall_0()); 
    }
this_RIGHT_PARENTHESIS_1=RULE_RIGHT_PARENTHESIS
    { 
    newLeafNode(this_RIGHT_PARENTHESIS_1, grammarAccess.getIf_StatementAccess().getRIGHT_PARENTHESISTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_StatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_StatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_3=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_3, grammarAccess.getIf_StatementAccess().getLEFT_PARENTHESISTerminalRuleCall_3()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_StatementAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_StatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	RULE_ELSE)=>this_ELSE_5=RULE_ELSE
    { 
    newLeafNode(this_ELSE_5, grammarAccess.getIf_StatementAccess().getELSETerminalRuleCall_5_0()); 
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_StatementAccess().getElseStatementStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_StatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleReturn_Statement
entryRuleReturn_Statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturn_StatementRule()); }
	 iv_ruleReturn_Statement=ruleReturn_Statement 
	 { $current=$iv_ruleReturn_Statement.current; } 
	 EOF 
;

// Rule Return_Statement
ruleReturn_Statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturn_StatementAccess().getReturn_StatementAction_0(),
            $current);
    }
)this_RETURN_1=RULE_RETURN
    { 
    newLeafNode(this_RETURN_1, grammarAccess.getReturn_StatementAccess().getRETURNTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturn_StatementAccess().getRvReturn_valueParserRuleCall_2_0()); 
	    }
		lv_rv_2_0=ruleReturn_value		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturn_StatementRule());
	        }
       		set(
       			$current, 
       			"rv",
        		lv_rv_2_0, 
        		"Return_value");
	        afterParserOrEnumRuleCall();
	    }

)
)?this_EOL_3=RULE_EOL
    { 
    newLeafNode(this_EOL_3, grammarAccess.getReturn_StatementAccess().getEOLTerminalRuleCall_3()); 
    }
)
;





// Entry rule entryRuleReturn_value
entryRuleReturn_value returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturn_valueRule()); }
	 iv_ruleReturn_value=ruleReturn_value 
	 { $current=$iv_ruleReturn_value.current; } 
	 EOF 
;

// Rule Return_value
ruleReturn_value returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getReturn_valueAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturn_valueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReturn_valueAccess().getMethod_callParserRuleCall_1()); 
    }
    this_Method_call_1=ruleMethod_call
    { 
        $current = $this_Method_call_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getReturn_valueAccess().getLiteral_ExpressionParserRuleCall_2()); 
    }
    this_Literal_Expression_2=ruleLiteral_Expression
    { 
        $current = $this_Literal_Expression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTry_statement
entryRuleTry_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTry_statementRule()); }
	 iv_ruleTry_statement=ruleTry_statement 
	 { $current=$iv_ruleTry_statement.current; } 
	 EOF 
;

// Rule Try_statement
ruleTry_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_try_0_0=RULE_TRY
		{
			newLeafNode(lv_try_0_0, grammarAccess.getTry_statementAccess().getTryTRYTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTry_statementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"try",
        		lv_try_0_0, 
        		"TRY");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getTryStatementStatementParserRuleCall_1_0()); 
	    }
		lv_tryStatement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		set(
       			$current, 
       			"tryStatement",
        		lv_tryStatement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
RULE_CATCH

)
)=>
(
		lv_catchs_2_0=RULE_CATCH
		{
			newLeafNode(lv_catchs_2_0, grammarAccess.getTry_statementAccess().getCatchsCATCHTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTry_statementRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"catchs",
        		lv_catchs_2_0, 
        		"CATCH");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getRIGHT_PARENTHESISparametersParameterParserRuleCall_2_1_0()); 
	    }
		lv_RIGHT_PARENTHESISparameters_3_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		add(
       			$current, 
       			"RIGHT_PARENTHESISparameters",
        		lv_RIGHT_PARENTHESISparameters_3_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)this_LEFT_PARENTHESIS_4=RULE_LEFT_PARENTHESIS
    { 
    newLeafNode(this_LEFT_PARENTHESIS_4, grammarAccess.getTry_statementAccess().getLEFT_PARENTHESISTerminalRuleCall_2_2()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getCatchStatementsStatementParserRuleCall_2_3_0()); 
	    }
		lv_catchStatements_5_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		add(
       			$current, 
       			"catchStatements",
        		lv_catchStatements_5_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((
(
RULE_FINALLY

)
)=>
(
		lv_finally_6_0=RULE_FINALLY
		{
			newLeafNode(lv_finally_6_0, grammarAccess.getTry_statementAccess().getFinallyFINALLYTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTry_statementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"finally",
        		lv_finally_6_0, 
        		"FINALLY");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTry_statementAccess().getFinallyStatementStatementParserRuleCall_3_1_0()); 
	    }
		lv_finallyStatement_7_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTry_statementRule());
	        }
       		set(
       			$current, 
       			"finallyStatement",
        		lv_finallyStatement_7_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePackage_statement
entryRulePackage_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_statementRule()); }
	 iv_rulePackage_statement=rulePackage_statement 
	 { $current=$iv_rulePackage_statement.current; } 
	 EOF 
;

// Rule Package_statement
rulePackage_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_PACKAGE_0=RULE_PACKAGE
    { 
    newLeafNode(this_PACKAGE_0, grammarAccess.getPackage_statementAccess().getPACKAGETerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackage_statementAccess().getNamePackage_nameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=rulePackage_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackage_statementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Package_name");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_2=RULE_EOL
    { 
    newLeafNode(this_EOL_2, grammarAccess.getPackage_statementAccess().getEOLTerminalRuleCall_2()); 
    }
)
;





// Entry rule entryRulePackage_name
entryRulePackage_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_nameRule()); } 
	 iv_rulePackage_name=rulePackage_name 
	 { $current=$iv_rulePackage_name.current.getText(); }  
	 EOF 
;

// Rule Package_name
rulePackage_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPackage_nameAccess().getIDTerminalRuleCall_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPackage_nameAccess().getPackage_name_auxParserRuleCall_1()); 
    }
    this_Package_name_aux_1=rulePackage_name_aux    {
		$current.merge(this_Package_name_aux_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulePackage_name_aux
entryRulePackage_name_aux returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackage_name_auxRule()); } 
	 iv_rulePackage_name_aux=rulePackage_name_aux 
	 { $current=$iv_rulePackage_name_aux.current.getText(); }  
	 EOF 
;

// Rule Package_name_aux
rulePackage_name_aux returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackage_name_auxAccess().getFullStopKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getPackage_name_auxAccess().getIDTerminalRuleCall_1()); 
    }
)*
    ;





// Entry rule entryRuleImport_statement
entryRuleImport_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImport_statementRule()); }
	 iv_ruleImport_statement=ruleImport_statement 
	 { $current=$iv_ruleImport_statement.current; } 
	 EOF 
;

// Rule Import_statement
ruleImport_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_IMPORT_0=RULE_IMPORT
    { 
    newLeafNode(this_IMPORT_0, grammarAccess.getImport_statementAccess().getIMPORTTerminalRuleCall_0()); 
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_statementAccess().getClassnameClass_nameParserRuleCall_1_0_0_0()); 
	    }
		lv_classname_1_0=ruleClass_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_statementRule());
	        }
       		set(
       			$current, 
       			"classname",
        		lv_classname_1_0, 
        		"Class_name");
	        afterParserOrEnumRuleCall();
	    }

)
)this_EOL_2=RULE_EOL
    { 
    newLeafNode(this_EOL_2, grammarAccess.getImport_statementAccess().getEOLTerminalRuleCall_1_0_1()); 
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getImport_statementAccess().getPackagenamePackage_nameParserRuleCall_1_1_0_0()); 
	    }
		lv_packagename_3_0=rulePackage_name		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImport_statementRule());
	        }
       		set(
       			$current, 
       			"packagename",
        		lv_packagename_3_0, 
        		"Package_name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='.' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getImport_statementAccess().getFullStopKeyword_1_1_1());
    }
this_MULTIPLY_5=RULE_MULTIPLY
    { 
    newLeafNode(this_MULTIPLY_5, grammarAccess.getImport_statementAccess().getMULTIPLYTerminalRuleCall_1_1_2()); 
    }
this_EOL_6=RULE_EOL
    { 
    newLeafNode(this_EOL_6, grammarAccess.getImport_statementAccess().getEOLTerminalRuleCall_1_1_3()); 
    }
this_EOL_7=RULE_EOL
    { 
    newLeafNode(this_EOL_7, grammarAccess.getImport_statementAccess().getEOLTerminalRuleCall_1_1_4()); 
    }
)))
;





// Entry rule entryRuleClass_name
entryRuleClass_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClass_nameRule()); } 
	 iv_ruleClass_name=ruleClass_name 
	 { $current=$iv_ruleClass_name.current.getText(); }  
	 EOF 
;

// Rule Class_name
ruleClass_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getClass_nameAccess().getPackage_nameParserRuleCall()); 
    }
    this_Package_name_0=rulePackage_name    {
		$current.merge(this_Package_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleInterface_name
entryRuleInterface_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterface_nameRule()); } 
	 iv_ruleInterface_name=ruleInterface_name 
	 { $current=$iv_ruleInterface_name.current.getText(); }  
	 EOF 
;

// Rule Interface_name
ruleInterface_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInterface_nameAccess().getPackage_nameParserRuleCall()); 
    }
    this_Package_name_0=rulePackage_name    {
		$current.merge(this_Package_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleEXPOENT_PART
entryRuleEXPOENT_PART returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEXPOENT_PARTRule()); } 
	 iv_ruleEXPOENT_PART=ruleEXPOENT_PART 
	 { $current=$iv_ruleEXPOENT_PART.current.getText(); }  
	 EOF 
;

// Rule EXPOENT_PART
ruleEXPOENT_PART returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_EXPONENTIAL_0=RULE_EXPONENTIAL    {
		$current.merge(this_EXPONENTIAL_0);
    }

    { 
    newLeafNode(this_EXPONENTIAL_0, grammarAccess.getEXPOENT_PARTAccess().getEXPONENTIALTerminalRuleCall_0()); 
    }
    this_DECIMAL_DIGITS_1=RULE_DECIMAL_DIGITS    {
		$current.merge(this_DECIMAL_DIGITS_1);
    }

    { 
    newLeafNode(this_DECIMAL_DIGITS_1, grammarAccess.getEXPOENT_PARTAccess().getDECIMAL_DIGITSTerminalRuleCall_1()); 
    }
)
    ;





RULE_INTERFACE : 'interface';

RULE_EXTENDS : 'extends';

RULE_COMMA : ',';

RULE_R_CURLY_BRACE : '{';

RULE_L_CURLY_BRACE : '}';

RULE_ABS : '[]';

RULE_R_ABS : '[';

RULE_L_ABS : ']';

RULE_EQUAL : '=';

RULE_NULL : 'NULL';

RULE_THIS : 'this';

RULE_SUPER : 'super';

RULE_INSTANCEOF : 'instanceof';

RULE_L_SHIFT : '<<';

RULE_R_SHIFT : '>>';

RULE_SUPER_SHIFT : '>>>';

RULE_R_SHIFT_EQUAL : '>>=';

RULE_DOUBLE_OR_EQUAL : '||=';

RULE_OR : '|';

RULE_OR_EQUAL : '|=';

RULE_EXP : '^';

RULE_EXP_EQUAL : '^=';

RULE_DOUBLE_EQUAL : '==';

RULE_DIFFERENT : '!=';

RULE_BT : '>';

RULE_ST : '<';

RULE_BE : '>=';

RULE_SE : '<=';

RULE_DIVIDE : '/';

RULE_DIVIDE_EQUAL : '/=';

RULE_MODULE : '%';

RULE_MODULE_EQUAL : '%=';

RULE_PLUS_EQUAL : '+=';

RULE_MINUS_EQUAL : '-=';

RULE_MULTIPLY : '*';

RULE_MULTIPLY_EQUAL : '*=';

RULE_WAT : '?';

RULE_AMPERSAND : 'ampersand';

RULE_EXPONENTIAL : ('e'|'e+'|'e-');

RULE_LONG : 'l';

RULE_STRING : '"' ( options {greedy=false;} : . )*'"';

RULE_COLON : ':';

RULE_NEW : 'new';

RULE_NOT : '~';

RULE_EXCLAMATION : '!';

RULE_FALSE : 'false';

RULE_TRUE : 'true';

RULE_DECREMENT : '--';

RULE_INCREMENT : '++';

RULE_STATIC : 'static';

RULE_DEFAULT : 'default';

RULE_CASE : 'case';

RULE_SWITCH : 'switch';

RULE_FOR : 'for';

RULE_RETURN : 'return';

RULE_RIGHT_PARENTHESIS : '(';

RULE_LEFT_PARENTHESIS : ')';

RULE_EOL : ';';

RULE_IF : 'if';

RULE_ELSE : 'else';

RULE_DO : 'do';

RULE_WHILE : 'while';

RULE_PACKAGE : 'package';

RULE_IMPORT : 'import';

RULE_CHAR : '\'' . '\'';

RULE_PLUS : '+';

RULE_MINUS : '-';

RULE_MOD : ('public'|'private'|'protected'|'final'|'native'|'synchronized'|'abstract'|'threadsafe'|'transient');

RULE_TRY : 'try';

RULE_CATCH : 'catch';

RULE_FINALLY : 'finally';

RULE_FLOAT_TYPE_SUFIX : ('f'|'d');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'$'|'\u00C0'..'\uFFFF')*;

RULE_HEXA : '0' 'x' ('0'..'9' 'a'..'f')*;

RULE_DECIMAL_DIGITS : ('0'..'9')+;

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

RULE_DOC_COMMENT : '/**';


